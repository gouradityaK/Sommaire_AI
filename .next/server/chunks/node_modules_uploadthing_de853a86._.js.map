{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"package-Beb-iarE.js","sources":["file:///E:/Project%20That%20I%20Can%20Done%20nd%20Git%20Upl/summarized-app/node_modules/uploadthing/package.json"],"sourcesContent":["{\n  \"name\": \"uploadthing\",\n  \"version\": \"7.7.3\",\n  \"type\": \"module\",\n  \"sideEffects\": false,\n  \"engines\": {\n    \"node\": \">=18.13.0\"\n  },\n  \"license\": \"MIT\",\n  \"exports\": {\n    \"./package.json\": \"./package.json\",\n    \"./client\": {\n      \"import\": {\n        \"types\": \"./client/index.d.ts\",\n        \"default\": \"./client/index.js\"\n      },\n      \"require\": {\n        \"types\": \"./client/index.d.cts\",\n        \"default\": \"./client/index.cjs\"\n      }\n    },\n    \"./client-future\": {\n      \"import\": {\n        \"types\": \"./client-future/index.d.ts\",\n        \"default\": \"./client-future/index.js\"\n      },\n      \"require\": {\n        \"types\": \"./client-future/index.d.cts\",\n        \"default\": \"./client-future/index.cjs\"\n      }\n    },\n    \"./server\": {\n      \"import\": {\n        \"types\": \"./server/index.d.ts\",\n        \"default\": \"./server/index.js\"\n      },\n      \"require\": {\n        \"types\": \"./server/index.d.cts\",\n        \"default\": \"./server/index.cjs\"\n      }\n    },\n    \"./next\": {\n      \"import\": {\n        \"types\": \"./next/index.d.ts\",\n        \"default\": \"./next/index.js\"\n      },\n      \"require\": {\n        \"types\": \"./next/index.d.cts\",\n        \"default\": \"./next/index.cjs\"\n      }\n    },\n    \"./next-legacy\": {\n      \"import\": {\n        \"types\": \"./next-legacy/index.d.ts\",\n        \"default\": \"./next-legacy/index.js\"\n      },\n      \"require\": {\n        \"types\": \"./next-legacy/index.d.cts\",\n        \"default\": \"./next-legacy/index.cjs\"\n      }\n    },\n    \"./effect-platform\": {\n      \"import\": {\n        \"types\": \"./effect-platform/index.d.ts\",\n        \"default\": \"./effect-platform/index.js\"\n      },\n      \"require\": {\n        \"types\": \"./effect-platform/index.d.cts\",\n        \"default\": \"./effect-platform/index.cjs\"\n      }\n    },\n    \"./tw\": {\n      \"browser\": \"./tw/index.browser.js\",\n      \"import\": {\n        \"types\": \"./tw/index.d.ts\",\n        \"default\": \"./tw/index.js\"\n      },\n      \"require\": {\n        \"types\": \"./tw/index.d.cts\",\n        \"default\": \"./tw/index.cjs\"\n      }\n    },\n    \"./tw/v4\": \"./tw/v4.css\",\n    \"./fastify\": {\n      \"import\": {\n        \"types\": \"./fastify/index.d.ts\",\n        \"default\": \"./fastify/index.js\"\n      },\n      \"require\": {\n        \"types\": \"./fastify/index.d.cts\",\n        \"default\": \"./fastify/index.cjs\"\n      }\n    },\n    \"./express\": {\n      \"import\": {\n        \"types\": \"./express/index.d.ts\",\n        \"default\": \"./express/index.js\"\n      },\n      \"require\": {\n        \"types\": \"./express/index.d.cts\",\n        \"default\": \"./express/index.cjs\"\n      }\n    },\n    \"./h3\": {\n      \"import\": {\n        \"types\": \"./h3/index.d.ts\",\n        \"default\": \"./h3/index.js\"\n      },\n      \"require\": {\n        \"types\": \"./h3/index.d.cts\",\n        \"default\": \"./h3/index.cjs\"\n      }\n    },\n    \"./remix\": {\n      \"import\": {\n        \"types\": \"./remix/index.d.ts\",\n        \"default\": \"./remix/index.js\"\n      },\n      \"require\": {\n        \"types\": \"./remix/index.d.cts\",\n        \"default\": \"./remix/index.cjs\"\n      }\n    },\n    \"./types\": {\n      \"types\": \"./types/index.d.ts\",\n      \"default\": \"./types/index.js\"\n    }\n  },\n  \"files\": [\n    \"client\",\n    \"client-future\",\n    \"dist\",\n    \"effect-platform\",\n    \"express\",\n    \"fastify\",\n    \"h3\",\n    \"next\",\n    \"next-legacy\",\n    \"remix\",\n    \"server\",\n    \"types\",\n    \"tw\"\n  ],\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"scripts\": {\n    \"lint\": \"eslint src test --max-warnings 0\",\n    \"build\": \"tsdown\",\n    \"clean\": \"git clean -xdf client express fastify h3 internal next next-legacy server tw node_modules\",\n    \"dev\": \"tsdown --no-clean\",\n    \"prepack\": \"bun ../../.github/replace-workspace-protocol.ts\",\n    \"test\": \"vitest run\",\n    \"typecheck\": \"tsc --noEmit\"\n  },\n  \"dependencies\": {\n    \"@effect/platform\": \"0.85.2\",\n    \"@standard-schema/spec\": \"1.0.0-beta.4\",\n    \"@uploadthing/mime-types\": \"workspace:*\",\n    \"@uploadthing/shared\": \"workspace:*\",\n    \"effect\": \"3.16.8\"\n  },\n  \"devDependencies\": {\n    \"@effect/vitest\": \"0.23.8\",\n    \"@remix-run/server-runtime\": \"^2.12.0\",\n    \"@types/body-parser\": \"^1.19.5\",\n    \"@types/express\": \"^5.0.0\",\n    \"@types/express-serve-static-core\": \"^5.0.3\",\n    \"@types/react\": \"19.1.2\",\n    \"@uploadthing/eslint-config\": \"workspace:*\",\n    \"@uploadthing/tsconfig\": \"workspace:*\",\n    \"@uploadthing/vitest-config\": \"workspace:*\",\n    \"@vitest/coverage-istanbul\": \"3.2.4\",\n    \"body-parser\": \"^1.20.2\",\n    \"eslint\": \"9.25.1\",\n    \"express\": \"^5.0.1\",\n    \"fastify\": \"^5.2.0\",\n    \"h3\": \"^1.13.0\",\n    \"msw\": \"2.7.5\",\n    \"next\": \"15.3.1\",\n    \"solid-js\": \"^1.9.3\",\n    \"tailwindcss\": \"^3.4.16\",\n    \"tsdown\": \"0.12.1\",\n    \"typescript\": \"5.8.3\",\n    \"valibot\": \"1.0.0-beta.9\",\n    \"vitest\": \"3.2.4\",\n    \"vue\": \"^3.4.21\",\n    \"wait-on\": \"^8.0.1\",\n    \"zod\": \"^3.24.1\"\n  },\n  \"peerDependencies\": {\n    \"express\": \"*\",\n    \"h3\": \"*\",\n    \"tailwindcss\": \"^3.0.0 || ^4.0.0-beta.0\"\n  },\n  \"peerDependenciesMeta\": {\n    \"next\": {\n      \"optional\": true\n    },\n    \"express\": {\n      \"optional\": true\n    },\n    \"fastify\": {\n      \"optional\": true\n    },\n    \"h3\": {\n      \"optional\": true\n    },\n    \"tailwindcss\": {\n      \"optional\": true\n    }\n  }\n}\n"],"names":[],"mappings":";;;;cAEa","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 20, "column": 0}, "map": {"version":3,"file":"deprecations-pLmw6Ytd.js","sources":["file:///E:/Project%20That%20I%20Can%20Done%20nd%20Git%20Upl/summarized-app/node_modules/uploadthing/src/_internal/deprecations.ts"],"sourcesContent":["export const logDeprecationWarning = (message: string) => {\n  // eslint-disable-next-line no-console\n  console.warn(`⚠️ [uploadthing][deprecated] ${message}`);\n};\n"],"names":["message: string"],"mappings":";;;;AAAA,MAAa,wBAAwB,CAACA,YAAoB;IAExD,QAAQ,IAAA,CAAA,CAAM,6BAAA,EAA+B,QAAQ,CAAA,CAAE;AACxD","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 35, "column": 0}, "map": {"version":3,"file":"shared-schemas-BIFDoqPF.js","sources":["file:///E:/Project%20That%20I%20Can%20Done%20nd%20Git%20Upl/summarized-app/node_modules/uploadthing/src/_internal/shared-schemas.ts"],"sourcesContent":["import * as S from \"effect/Schema\";\n\nimport type { Json } from \"@uploadthing/shared\";\nimport { ValidACLs, ValidContentDispositions } from \"@uploadthing/shared\";\n\nexport const ContentDispositionSchema = S.Literal(...ValidContentDispositions);\nexport const ACLSchema = S.Literal(...ValidACLs);\n\n/**\n * Valid options for the `?actionType` query param\n */\nexport const ActionType = S.Literal(\"upload\");\n\n/**\n * Valid options for the `uploadthing-hook` header\n * for requests coming from UT server\n */\nexport const UploadThingHook = S.Literal(\"callback\", \"error\");\n\n/**\n * =============================================================================\n * =========================== Configuration ===================================\n * =============================================================================\n */\nconst DecodeString = S.transform(S.Uint8ArrayFromSelf, S.String, {\n  decode: (data) => new TextDecoder().decode(data),\n  encode: (data) => new TextEncoder().encode(data),\n});\n\nexport const ParsedToken = S.Struct({\n  apiKey: S.Redacted(S.String.pipe(S.startsWith(\"sk_\"))),\n  appId: S.String,\n  regions: S.NonEmptyArray(S.String),\n  ingestHost: S.String.pipe(\n    S.optionalWith({ default: () => \"ingest.uploadthing.com\" }),\n  ),\n});\n\nexport const UploadThingToken = S.Uint8ArrayFromBase64.pipe(\n  S.compose(DecodeString),\n  S.compose(S.parseJson(ParsedToken)),\n);\n\n/**\n * =============================================================================\n * ======================== File Type Hierarchy ===============================\n * =============================================================================\n */\n\n/**\n * Properties from the web File object, this is what the client sends when initiating an upload\n */\nexport class FileUploadData extends S.Class<FileUploadData>(\"FileUploadData\")({\n  name: S.String,\n  size: S.Number,\n  type: S.String,\n  lastModified: S.Number.pipe(S.optional),\n}) {}\n\n/**\n * `.middleware()` can add a customId to the incoming file data\n */\nexport class FileUploadDataWithCustomId extends FileUploadData.extend<FileUploadDataWithCustomId>(\n  \"FileUploadDataWithCustomId\",\n)({\n  customId: S.NullOr(S.String),\n}) {}\n\n/**\n * When files are uploaded, we get back\n * - a key\n * - URLs for the file\n * - the hash (md5-hex) of the uploaded file's contents\n */\nexport class UploadedFileData extends FileUploadDataWithCustomId.extend<UploadedFileData>(\n  \"UploadedFileData\",\n)({\n  key: S.String,\n  /**\n   * @deprecated\n   * This field will be removed in uploadthing v9. Use `ufsUrl` instead.\n   */\n  url: S.String,\n  /**\n   * @deprecated\n   * This field will be removed in uploadthing v9. Use `ufsUrl` instead.\n   */\n  appUrl: S.String,\n  ufsUrl: S.String,\n  fileHash: S.String,\n}) {}\n\n/**\n * When the client has uploaded a file and polled for data returned by `.onUploadComplete()`\n */\nexport interface ClientUploadedFileData<T> extends UploadedFileData {\n  /**\n   * Matches what's returned from the serverside `onUploadComplete` callback\n   */\n  readonly serverData: T;\n}\n\n/**\n * =============================================================================\n * ======================== Server Response Schemas ============================\n * =============================================================================\n */\n\nexport class NewPresignedUrl extends S.Class<NewPresignedUrl>(\n  \"NewPresignedUrl\",\n)({\n  url: S.String,\n  key: S.String,\n  customId: S.NullOr(S.String),\n  name: S.String,\n}) {}\n\nexport class MetadataFetchStreamPart extends S.Class<MetadataFetchStreamPart>(\n  \"MetadataFetchStreamPart\",\n)({\n  payload: S.String,\n  signature: S.String,\n  hook: UploadThingHook,\n}) {}\n\nexport class MetadataFetchResponse extends S.Class<MetadataFetchResponse>(\n  \"MetadataFetchResponse\",\n)({\n  ok: S.Boolean,\n}) {}\n\nexport class CallbackResultResponse extends S.Class<CallbackResultResponse>(\n  \"CallbackResultResponse\",\n)({\n  ok: S.Boolean,\n}) {}\n\n/**\n * =============================================================================\n * ======================== Client Action Payloads ============================\n * =============================================================================\n */\n\nexport class UploadActionPayload extends S.Class<UploadActionPayload>(\n  \"UploadActionPayload\",\n)({\n  files: S.Array(FileUploadData),\n  input: S.Unknown as S.Schema<Json>,\n}) {}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;AAKA,MAAa,gMAA2B,EAAE,SAAA,CAAQ,+JAAG,2BAAA,CAAyB;AAC9E,MAAa,kLAAY,EAAE,QAAA,CAAQ,+JAAG,YAAA,CAAU;;;GAKhD,MAAa,mLAAa,EAAE,QAAA,EAAQ,SAAS;;;;GAM7C,MAAa,wLAAkB,EAAE,QAAA,EAAQ,YAAY,QAAQ;;;;;GAO7D,MAAM,qLAAe,EAAE,UAAA,oKAAU,EAAE,mBAAA,oKAAoB,EAAE,OAAA,EAAQ;IAC/D,QAAQ,CAAC,OAAS,IAAI,cAAc,MAAA,CAAO,KAAK;IAChD,QAAQ,CAAC,OAAS,IAAI,cAAc,MAAA,CAAO,KAAK;AACjD,EAAC;AAEF,MAAa,eAAc,EAAE,4KAAA,EAAO;IAClC,8KAAQ,EAAE,SAAA,oKAAS,EAAE,OAAA,CAAO,IAAA,uKAAK,EAAE,WAAA,EAAW,MAAM,CAAC,CAAC;IACtD,OAAO,EAAE,yKAAA;IACT,+KAAS,EAAE,cAAA,oKAAc,EAAE,OAAA,CAAO;IAClC,8KAAY,EAAE,OAAA,CAAO,IAAA,KACnB,EAAE,+KAAA,EAAa;QAAE,SAAS,IAAM;IAA0B,EAAC,CAC5D;AACF,EAAC;AAEF,MAAa,qLAAmB,EAAE,qBAAA,CAAqB,IAAA,uKACrD,EAAE,QAAA,EAAQ,aAAa,EACvB,EAAE,8KAAA,wKAAQ,EAAE,UAAA,EAAU,YAAY,CAAC,CACpC;;;;;;;GAWD,IAAa,iBAAb,cAAoC,EAAE,4KAAA,EAAsB,iBAAiB,CAAC;IAC5E,wKAAM,EAAE,OAAA;IACR,wKAAM,EAAE,OAAA;IACR,MAAM,EAAE,yKAAA;IACR,gLAAc,EAAE,OAAA,CAAO,IAAA,mKAAK,EAAE,SAAA,CAAS;AACxC,EAAC,CAAC;AAAE;;;GAKL,IAAa,6BAAb,cAAgD,eAAe,MAAA,CAC7D,6BACD,CAAC;IACA,WAAU,EAAE,4KAAA,oKAAO,EAAE,OAAA,CAAO;AAC7B,EAAC,CAAC;AAAE;;;;;;GAQL,IAAa,mBAAb,cAAsC,2BAA2B,MAAA,CAC/D,mBACD,CAAC;IACA,KAAK,EAAE,yKAAA;IAKP,uKAAK,EAAE,OAAA;IAKP,0KAAQ,EAAE,OAAA;IACV,0KAAQ,EAAE,OAAA;IACV,2KAAU,EAAE,QAAA;AACb,EAAC,CAAC;AAAE;AA2BL,IAAa,0BAAb,oLAA6C,EAAE,MAAA,EAC7C,0BACD,CAAC;IACA,0KAAS,EAAE,QAAA;IACX,6KAAW,EAAE,OAAA;IACb,MAAM;AACP,EAAC,CAAC;AAAE;AAEL,IAAa,wBAAb,oLAA2C,EAAE,MAAA,EAC3C,wBACD,CAAC;IACA,sKAAI,EAAE,QAAA;AACP,EAAC,CAAC;AAAE;AAEL,IAAa,yBAAb,oLAA4C,EAAE,MAAA,EAC5C,yBACD,CAAC;IACA,qKAAI,EAAE,SAAA;AACP,EAAC,CAAC;AAAE;;;;;GAQL,IAAa,sBAAb,oLAAyC,EAAE,MAAA,EACzC,sBACD,CAAC;IACA,6KAAO,EAAE,MAAA,EAAM,eAAe;IAC9B,yKAAO,EAAE,QAAA;AACV,EAAC,CAAC;AAAE","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 139, "column": 0}, "map": {"version":3,"file":"upload-builder-e0_p9NOT.js","sources":["file:///E:/Project%20That%20I%20Can%20Done%20nd%20Git%20Upl/summarized-app/node_modules/uploadthing/src/_internal/config.ts","file:///E:/Project%20That%20I%20Can%20Done%20nd%20Git%20Upl/summarized-app/node_modules/uploadthing/src/_internal/error-formatter.ts","file:///E:/Project%20That%20I%20Can%20Done%20nd%20Git%20Upl/summarized-app/node_modules/uploadthing/src/_internal/jsonl.ts","file:///E:/Project%20That%20I%20Can%20Done%20nd%20Git%20Upl/summarized-app/node_modules/uploadthing/src/_internal/logger.ts","file:///E:/Project%20That%20I%20Can%20Done%20nd%20Git%20Upl/summarized-app/node_modules/uploadthing/src/_internal/parser.ts","file:///E:/Project%20That%20I%20Can%20Done%20nd%20Git%20Upl/summarized-app/node_modules/uploadthing/src/_internal/route-config.ts","file:///E:/Project%20That%20I%20Can%20Done%20nd%20Git%20Upl/summarized-app/node_modules/uploadthing/src/_internal/runtime.ts","file:///E:/Project%20That%20I%20Can%20Done%20nd%20Git%20Upl/summarized-app/node_modules/uploadthing/src/_internal/types.ts","file:///E:/Project%20That%20I%20Can%20Done%20nd%20Git%20Upl/summarized-app/node_modules/uploadthing/src/_internal/handler.ts","file:///E:/Project%20That%20I%20Can%20Done%20nd%20Git%20Upl/summarized-app/node_modules/uploadthing/src/_internal/upload-builder.ts"],"sourcesContent":["import * as Config from \"effect/Config\";\nimport * as ConfigProvider from \"effect/ConfigProvider\";\nimport * as Effect from \"effect/Effect\";\nimport * as S from \"effect/Schema\";\n\nimport {\n  filterDefinedObjectValues,\n  UploadThingError,\n} from \"@uploadthing/shared\";\n\nimport { UploadThingToken } from \"./shared-schemas\";\n\nexport { version as UPLOADTHING_VERSION } from \"../../package.json\";\n\n/**\n * Merge in `import.meta.env` to the built-in `process.env` provider\n * Prefix keys with `UPLOADTHING_` so we can reference just the name.\n * @example\n * process.env.UPLOADTHING_TOKEN = \"foo\"\n * Config.string(\"token\"); // Config<\"foo\">\n */\nconst envProvider = ConfigProvider.fromEnv().pipe(\n  ConfigProvider.orElse(() =>\n    ConfigProvider.fromMap(\n      new Map(\n        Object.entries(\n          filterDefinedObjectValues(\n            // fuck this I give up. import.meta is a mistake, someone else can fix it\n            (\n              import.meta as unknown as\n                | { env: Record<string, string> }\n                | undefined\n            )?.env ?? {},\n          ),\n        ),\n      ),\n      {\n        pathDelim: \"_\",\n      },\n    ),\n  ),\n  ConfigProvider.nested(\"uploadthing\"),\n  ConfigProvider.constantCase,\n);\n\n/**\n * Config provider that merges the options from the object\n * and environment variables prefixed with `UPLOADTHING_`.\n * @remarks Options take precedence over environment variables.\n */\nexport const configProvider = (options: unknown) =>\n  ConfigProvider.fromJson(options ?? {}).pipe(\n    ConfigProvider.orElse(() => envProvider),\n  );\n\nexport const IsDevelopment = Config.boolean(\"isDev\").pipe(\n  Config.orElse(() =>\n    Config.succeed(\n      typeof process !== \"undefined\" ? process.env.NODE_ENV : undefined,\n    ).pipe(Config.map((_) => _ === \"development\")),\n  ),\n  Config.withDefault(false),\n);\n\nexport const UTToken = S.Config(\"token\", UploadThingToken).pipe(\n  Effect.catchTags({\n    ConfigError: (e) =>\n      new UploadThingError({\n        code: e._op === \"InvalidData\" ? \"INVALID_SERVER_CONFIG\" : \"MISSING_ENV\",\n        message:\n          e._op === \"InvalidData\"\n            ? \"Invalid token. A token is a base64 encoded JSON object matching { apiKey: string, appId: string, regions: string[] }.\"\n            : \"Missing token. Please set the `UPLOADTHING_TOKEN` environment variable or provide a token manually through config.\",\n        cause: e,\n      }),\n  }),\n);\n\nexport const ApiUrl = Config.string(\"apiUrl\").pipe(\n  Config.withDefault(\"https://api.uploadthing.com\"),\n  Config.mapAttempt((_) => new URL(_)),\n  Config.map((url) => url.href.replace(/\\/$/, \"\")),\n);\n\nexport const IngestUrl = Effect.fn(function* (\n  preferredRegion: string | undefined,\n) {\n  const { regions, ingestHost } = yield* UTToken;\n\n  const region = preferredRegion\n    ? (regions.find((r) => r === preferredRegion) ?? regions[0])\n    : regions[0];\n\n  return yield* Config.string(\"ingestUrl\").pipe(\n    Config.withDefault(`https://${region}.${ingestHost}`),\n    Config.mapAttempt((_) => new URL(_)),\n    Config.map((url) => url.href.replace(/\\/$/, \"\")),\n  );\n});\n\nexport const UtfsHost = Config.string(\"utfsHost\").pipe(\n  Config.withDefault(\"utfs.io\"),\n);\n\nexport const UfsHost = Config.string(\"ufsHost\").pipe(\n  Config.withDefault(\"ufs.sh\"),\n);\n\nexport const UfsAppIdLocation = Config.literal(\n  \"subdomain\",\n  \"path\",\n)(\"ufsAppIdLocation\").pipe(Config.withDefault(\"subdomain\"));\n","import type { UploadThingError } from \"@uploadthing/shared\";\n\nimport type { FileRouter, inferErrorShape } from \"../types\";\n\nexport function defaultErrorFormatter(error: UploadThingError) {\n  return {\n    message: error.message,\n  };\n}\n\nexport function formatError(\n  error: UploadThingError,\n  router: FileRouter,\n): inferErrorShape<FileRouter[string]> {\n  const firstSlug = Object.keys(router)[0];\n  const errorFormatter = firstSlug\n    ? (router[firstSlug]?.errorFormatter ?? defaultErrorFormatter)\n    : defaultErrorFormatter;\n\n  return errorFormatter(error);\n}\n","import * as Effect from \"effect/Effect\";\nimport * as S from \"effect/Schema\";\nimport * as Stream from \"effect/Stream\";\n\nexport const handleJsonLineStream =\n  <TChunk>(\n    schema: S.Schema<TChunk>,\n    onChunk: (chunk: TChunk) => Effect.Effect<void>,\n  ) =>\n  <E, R>(stream: Stream.Stream<Uint8Array, E, R>) => {\n    let buf = \"\";\n\n    return stream.pipe(\n      Stream.decodeText(),\n      Stream.mapEffect((chunk) =>\n        Effect.gen(function* () {\n          buf += chunk;\n\n          // Scan buffer for newlines\n          const parts = buf.split(\"\\n\");\n          const validChunks: unknown[] = [];\n\n          for (const part of parts) {\n            try {\n              // Attempt to parse chunk as JSON\n              validChunks.push(JSON.parse(part) as unknown);\n              // Advance buffer if parsing succeeded\n              buf = buf.slice(part.length + 1);\n            } catch {\n              //\n            }\n          }\n\n          yield* Effect.logDebug(\"Received chunks\").pipe(\n            Effect.annotateLogs(\"chunk\", chunk),\n            Effect.annotateLogs(\"parsedChunks\", validChunks),\n            Effect.annotateLogs(\"buf\", buf),\n          );\n\n          return validChunks;\n        }),\n      ),\n      Stream.mapEffect(S.decodeUnknown(S.Array(schema))),\n      Stream.mapEffect(Effect.forEach((part) => onChunk(part))),\n      Stream.runDrain,\n      Effect.withLogSpan(\"handleJsonLineStream\"),\n    );\n  };\n","import type * as HttpBody from \"@effect/platform/HttpBody\";\nimport type * as HttpClientError from \"@effect/platform/HttpClientError\";\nimport type * as HttpClientResponse from \"@effect/platform/HttpClientResponse\";\nimport * as Config from \"effect/Config\";\nimport * as ConfigError from \"effect/ConfigError\";\nimport * as Effect from \"effect/Effect\";\nimport * as Either from \"effect/Either\";\nimport * as Layer from \"effect/Layer\";\nimport * as Logger from \"effect/Logger\";\nimport * as LogLevel from \"effect/LogLevel\";\n\nimport { UploadThingError } from \"@uploadthing/shared\";\n\nimport { IsDevelopment } from \"./config\";\n\n/**\n * Config.logLevel counter-intuitively accepts LogLevel[\"label\"]\n * instead of a literal, ripping it and changing to accept literal\n * Effect 4.0 will change this to accept a literal and then we can\n * remove this and go back to the built-in validator.\n */\nconst ConfigLogLevel = (name?: string): Config.Config<LogLevel.LogLevel> => {\n  const config = Config.mapOrFail(Config.string(), (literal) => {\n    const level = LogLevel.allLevels.find((level) => level._tag === literal);\n    return level === undefined\n      ? Either.left(\n          ConfigError.InvalidData(\n            [],\n            `Expected a log level but received ${literal}`,\n          ),\n        )\n      : Either.right(level);\n  });\n  return name === undefined ? config : Config.nested(config, name);\n};\n\nexport const withMinimalLogLevel = ConfigLogLevel(\"logLevel\").pipe(\n  Config.withDefault(LogLevel.Info),\n  Effect.andThen((level) => Logger.minimumLogLevel(level)),\n  Effect.tapError((e) =>\n    Effect.logError(\"Invalid log level\").pipe(Effect.annotateLogs(\"error\", e)),\n  ),\n  Effect.catchTag(\n    \"ConfigError\",\n    (e) =>\n      new UploadThingError({\n        code: \"INVALID_SERVER_CONFIG\",\n        message: \"Invalid server configuration\",\n        cause: e,\n      }),\n  ),\n  Layer.unwrapEffect,\n);\n\nexport const LogFormat = Config.literal(\n  \"json\",\n  \"logFmt\",\n  \"structured\",\n  \"pretty\",\n)(\"logFormat\");\nexport type LogFormat = Config.Config.Success<typeof LogFormat>;\n\nexport const withLogFormat = Effect.gen(function* () {\n  const isDev = yield* IsDevelopment;\n  const logFormat = yield* LogFormat.pipe(\n    Config.withDefault(isDev ? \"pretty\" : \"json\"),\n  );\n  return Logger[logFormat];\n}).pipe(\n  Effect.catchTag(\n    \"ConfigError\",\n    (e) =>\n      new UploadThingError({\n        code: \"INVALID_SERVER_CONFIG\",\n        message: \"Invalid server configuration\",\n        cause: e,\n      }),\n  ),\n  Layer.unwrapEffect,\n);\n\ntype HttpClientResponseMixinMethod = \"json\" | \"text\" | \"arrayBuffer\" | \"None\";\n\nexport const logHttpClientResponse = (\n  message: string,\n  opts?: {\n    /** Level to log on, default \"Debug\" */\n    level?: LogLevel.Literal;\n    /** What body mixin to use to get the response body, default \"json\" */\n    mixin?: HttpClientResponseMixinMethod;\n  },\n) => {\n  const mixin = opts?.mixin ?? \"json\";\n  const level = LogLevel.fromLiteral(opts?.level ?? \"Debug\");\n\n  return (response: HttpClientResponse.HttpClientResponse) =>\n    Effect.flatMap(mixin !== \"None\" ? response[mixin] : Effect.void, () =>\n      Effect.logWithLevel(level, `${message} (${response.status})`).pipe(\n        Effect.annotateLogs(\"response\", response),\n      ),\n    );\n};\n\nexport const logHttpClientError =\n  (message: string) =>\n  (err: HttpClientError.HttpClientError | HttpBody.HttpBodyError) =>\n    err._tag === \"ResponseError\"\n      ? logHttpClientResponse(message, { level: \"Error\" })(err.response)\n      : Effect.logError(message).pipe(Effect.annotateLogs(\"error\", err));\n","import type * as Standard from \"@standard-schema/spec\";\nimport * as Cause from \"effect/Cause\";\nimport * as Data from \"effect/Data\";\nimport * as Runtime from \"effect/Runtime\";\nimport * as Schema from \"effect/Schema\";\n\nimport type { Json } from \"@uploadthing/shared\";\n\nexport type ParseFn<TType> = (input: unknown) => Promise<TType>;\n\nexport type ParserZodEsque<TInput extends Json, TParsedInput> = {\n  _input: TInput;\n  _output: TParsedInput; // if using .transform etc\n  parseAsync: ParseFn<TParsedInput>;\n};\n\n// In case we add support for more parsers later\nexport type JsonParser<In extends Json, Out = In> =\n  | ParserZodEsque<In, Out>\n  | Standard.StandardSchemaV1<In, Out>\n  | Schema.Schema<Out, In>;\n\nexport class ParserError extends Data.TaggedError(\"ParserError\")<{\n  cause: unknown;\n}> {\n  message =\n    \"Input validation failed. The original error with it's validation issues is in the error cause.\";\n}\n\nexport function getParseFn<\n  TOut extends Json,\n  TParser extends JsonParser<any, TOut>,\n>(parser: TParser): ParseFn<TOut> {\n  if (\"parseAsync\" in parser && typeof parser.parseAsync === \"function\") {\n    /**\n     * Zod\n     * TODO (next major): Consider wrapping ZodError in ParserError\n     */\n    return parser.parseAsync;\n  }\n\n  if (Schema.isSchema(parser)) {\n    /**\n     * Effect Schema\n     */\n    return (value) =>\n      Schema.decodeUnknownPromise(parser as Schema.Schema<any, TOut>)(\n        value,\n      ).catch((error) => {\n        throw new ParserError({\n          cause: Cause.squash(\n            (error as Runtime.FiberFailure)[Runtime.FiberFailureCauseId],\n          ),\n        });\n      });\n  }\n\n  if (\"~standard\" in parser) {\n    /**\n     * Standard Schema\n     * TODO (next major): Consider moving this to the top of the function\n     */\n    return async (value) => {\n      const result = await parser[\"~standard\"].validate(value);\n      if (result.issues) {\n        throw new ParserError({ cause: result.issues });\n      }\n      return result.value;\n    };\n  }\n\n  throw new Error(\"Invalid parser\");\n}\n","import * as Data from \"effect/Data\";\nimport * as Effect from \"effect/Effect\";\nimport type * as S from \"effect/Schema\";\n\nimport type {\n  ExpandedRouteConfig,\n  FileRouterInputKey,\n  FileSize,\n  InvalidFileSizeError,\n  InvalidFileTypeError,\n  UnknownFileTypeError,\n} from \"@uploadthing/shared\";\nimport {\n  bytesToFileSize,\n  fileSizeToBytes,\n  fillInputRouteConfig,\n  InvalidRouteConfigError,\n  matchFileType,\n  objectKeys,\n  UploadThingError,\n} from \"@uploadthing/shared\";\n\nimport type { FileRouter } from \"../types\";\nimport type { UploadActionPayload } from \"./shared-schemas\";\n\nclass FileSizeMismatch extends Data.Error<{\n  reason: string;\n}> {\n  readonly _tag = \"FileSizeMismatch\";\n  readonly name = \"FileSizeMismatchError\";\n  constructor(type: FileRouterInputKey, max: FileSize, actual: number) {\n    const reason = `You uploaded a ${type} file that was ${bytesToFileSize(actual)}, but the limit for that type is ${max}`;\n    super({ reason });\n  }\n}\n\nclass FileCountMismatch extends Data.Error<{\n  reason: string;\n}> {\n  readonly _tag = \"FileCountMismatch\";\n  readonly name = \"FileCountMismatchError\";\n  constructor(\n    type: FileRouterInputKey,\n    boundtype: \"minimum\" | \"maximum\",\n    bound: number,\n    actual: number,\n  ) {\n    const reason = `You uploaded ${actual} file(s) of type '${type}', but the ${boundtype} for that type is ${bound}`;\n\n    super({ reason });\n  }\n}\n\n// Verify that the uploaded files doesn't violate the route config,\n// e.g. uploading more videos than allowed, or a file that is larger than allowed.\n// This is double-checked on infra side, but we want to fail early to avoid network latency.\nexport const assertFilesMeetConfig = (\n  files: S.Schema.Type<typeof UploadActionPayload>[\"files\"],\n  routeConfig: ExpandedRouteConfig,\n): Effect.Effect<\n  null,\n  | UploadThingError\n  | FileSizeMismatch\n  | FileCountMismatch\n  | InvalidRouteConfigError\n  | UnknownFileTypeError\n  | InvalidFileTypeError\n  | InvalidFileSizeError\n> =>\n  Effect.gen(function* () {\n    const counts: Record<string, number> = {};\n\n    for (const file of files) {\n      const type = yield* matchFileType(file, objectKeys(routeConfig));\n      counts[type] = (counts[type] ?? 0) + 1;\n\n      const sizeLimit = routeConfig[type]?.maxFileSize;\n      if (!sizeLimit) {\n        return yield* new InvalidRouteConfigError(type, \"maxFileSize\");\n      }\n      const sizeLimitBytes = yield* fileSizeToBytes(sizeLimit);\n\n      if (file.size > sizeLimitBytes) {\n        return yield* new FileSizeMismatch(type, sizeLimit, file.size);\n      }\n    }\n\n    for (const _key in counts) {\n      const key = _key as FileRouterInputKey;\n      const config = routeConfig[key];\n      if (!config) return yield* new InvalidRouteConfigError(key);\n\n      const count = counts[key];\n      const min = config.minFileCount;\n      const max = config.maxFileCount;\n\n      if (min > max) {\n        return yield* new UploadThingError({\n          code: \"BAD_REQUEST\",\n          message:\n            \"Invalid config during file count - minFileCount > maxFileCount\",\n          cause: `minFileCount must be less than maxFileCount for key ${key}. got: ${min} > ${max}`,\n        });\n      }\n\n      if (count != null && count < min) {\n        return yield* new FileCountMismatch(key, \"minimum\", min, count);\n      }\n      if (count != null && count > max) {\n        return yield* new FileCountMismatch(key, \"maximum\", max, count);\n      }\n    }\n\n    return null;\n  });\n\nexport const extractRouterConfig = <TRouter extends FileRouter>(\n  router: TRouter,\n) =>\n  Effect.forEach(objectKeys(router), (slug) =>\n    Effect.map(fillInputRouteConfig(router[slug]!.routerConfig), (config) => ({\n      slug,\n      config,\n    })),\n  );\n","import * as FetchHttpClient from \"@effect/platform/FetchHttpClient\";\nimport * as Headers from \"@effect/platform/Headers\";\nimport * as FiberRef from \"effect/FiberRef\";\nimport * as Layer from \"effect/Layer\";\nimport * as ManagedRuntime from \"effect/ManagedRuntime\";\n\nimport type { FetchEsque } from \"@uploadthing/shared\";\n\nimport { configProvider } from \"./config\";\nimport { withLogFormat, withMinimalLogLevel } from \"./logger\";\n\nexport const makeRuntime = (fetch: FetchEsque, config: unknown) => {\n  const fetchHttpClient = Layer.provideMerge(\n    FetchHttpClient.layer,\n    Layer.succeed(FetchHttpClient.Fetch, fetch as typeof globalThis.fetch),\n  );\n\n  const withRedactedHeaders = Layer.effectDiscard(\n    FiberRef.update(Headers.currentRedactedNames, (_) =>\n      _.concat([\"x-uploadthing-api-key\"]),\n    ),\n  );\n\n  const layer = Layer.provide(\n    Layer.mergeAll(\n      withLogFormat,\n      withMinimalLogLevel,\n      fetchHttpClient,\n      withRedactedHeaders,\n    ),\n    Layer.setConfigProvider(configProvider(config)),\n  );\n  return ManagedRuntime.make(layer);\n};\n","import type { Schema } from \"effect/Schema\";\n\nimport type {\n  ErrorMessage,\n  FileRouterInputConfig,\n  Json,\n  JsonObject,\n  MaybePromise,\n  RouteOptions,\n  Simplify,\n  UploadThingError,\n} from \"@uploadthing/shared\";\n\nimport type { JsonParser } from \"./parser\";\nimport type {\n  FileUploadDataWithCustomId,\n  NewPresignedUrl,\n  UploadActionPayload,\n  UploadedFileData,\n} from \"./shared-schemas\";\n\nexport type UTRegionAlias =\n  | \"bom1\"\n  | \"icn1\"\n  | \"syd1\"\n  | \"can1\"\n  | \"fra1\"\n  | \"zrh1\"\n  | \"dub1\"\n  | \"cle1\"\n  | \"sfo1\"\n  | \"sea1\";\n\n/**\n * Marker used to select the region based on the incoming request\n */\nexport const UTRegion = Symbol(\"uploadthing-region-symbol\");\n\n/**\n * Marker used to append a `customId` to the incoming file data in `.middleware()`\n * @example\n * ```ts\n * .middleware((opts) => {\n *   return {\n *     [UTFiles]: opts.files.map((file) => ({\n *       ...file,\n *       customId: generateId(),\n *     }))\n *   };\n * })\n * ```\n */\nexport const UTFiles = Symbol(\"uploadthing-custom-id-symbol\");\n\nexport type UnsetMarker = \"unsetMarker\" & {\n  __brand: \"unsetMarker\";\n};\n\nexport type ValidMiddlewareObject = {\n  [UTRegion]?: UTRegionAlias;\n  [UTFiles]?: Partial<FileUploadDataWithCustomId>[];\n  [key: string]: unknown;\n};\n\nexport interface AnyParams {\n  _routeOptions: any;\n  _input: {\n    in: any;\n    out: any;\n  };\n  _metadata: any; // imaginary field used to bind metadata return type to an Upload resolver\n  _adapterFnArgs: Record<string, unknown>;\n  _errorShape: any;\n  _errorFn: any; // used for onUploadError\n  _output: any;\n}\n\ntype MiddlewareFn<\n  TInput extends Json | UnsetMarker,\n  TOutput extends ValidMiddlewareObject,\n  TArgs extends Record<string, unknown>,\n> = (\n  opts: TArgs & {\n    files: Schema.Type<typeof UploadActionPayload>[\"files\"];\n    input: TInput extends UnsetMarker ? undefined : TInput;\n  },\n) => MaybePromise<TOutput>;\n\ntype UploadCompleteFn<\n  TMetadata,\n  TOutput extends JsonObject | void,\n  TArgs extends Record<string, unknown>,\n> = (\n  opts: TArgs & {\n    metadata: TMetadata;\n    file: UploadedFileData;\n  },\n) => MaybePromise<TOutput>;\n\ntype UploadErrorFn<TArgs extends Record<string, unknown>> = (\n  input: TArgs & {\n    error: UploadThingError;\n    fileKey: string;\n  },\n) => MaybePromise<void>;\n\nexport interface UploadBuilder<TParams extends AnyParams> {\n  input: <TIn extends Json, TOut>(\n    parser: TParams[\"_input\"][\"in\"] extends UnsetMarker\n      ? JsonParser<TIn, TOut>\n      : ErrorMessage<\"input is already set\">,\n  ) => UploadBuilder<{\n    _routeOptions: TParams[\"_routeOptions\"];\n    _input: { in: TIn; out: TOut };\n    _metadata: TParams[\"_metadata\"];\n    _adapterFnArgs: TParams[\"_adapterFnArgs\"];\n    _errorShape: TParams[\"_errorShape\"];\n    _errorFn: TParams[\"_errorFn\"];\n    _output: UnsetMarker;\n  }>;\n  middleware: <TOutput extends ValidMiddlewareObject>(\n    fn: TParams[\"_metadata\"] extends UnsetMarker\n      ? MiddlewareFn<\n          TParams[\"_input\"][\"out\"],\n          TOutput,\n          TParams[\"_adapterFnArgs\"]\n        >\n      : ErrorMessage<\"middleware is already set\">,\n  ) => UploadBuilder<{\n    _routeOptions: TParams[\"_routeOptions\"];\n    _input: TParams[\"_input\"];\n    _metadata: TOutput;\n    _adapterFnArgs: TParams[\"_adapterFnArgs\"];\n    _errorShape: TParams[\"_errorShape\"];\n    _errorFn: TParams[\"_errorFn\"];\n    _output: UnsetMarker;\n  }>;\n  onUploadError: (\n    fn: TParams[\"_errorFn\"] extends UnsetMarker\n      ? UploadErrorFn<TParams[\"_adapterFnArgs\"]>\n      : ErrorMessage<\"onUploadError is already set\">,\n  ) => UploadBuilder<{\n    _routeOptions: TParams[\"_routeOptions\"];\n    _input: TParams[\"_input\"];\n    _metadata: TParams[\"_metadata\"];\n    _adapterFnArgs: TParams[\"_adapterFnArgs\"];\n    _errorShape: TParams[\"_errorShape\"];\n    _errorFn: UploadErrorFn<TParams[\"_adapterFnArgs\"]>;\n    _output: UnsetMarker;\n  }>;\n  onUploadComplete: <TOutput extends JsonObject | void>(\n    fn: UploadCompleteFn<\n      Simplify<\n        TParams[\"_metadata\"] extends UnsetMarker\n          ? undefined\n          : Omit<TParams[\"_metadata\"], typeof UTFiles | typeof UTRegion>\n      >,\n      TOutput,\n      TParams[\"_adapterFnArgs\"]\n    >,\n  ) => FileRoute<{\n    input: TParams[\"_input\"][\"in\"] extends UnsetMarker\n      ? undefined\n      : TParams[\"_input\"][\"in\"];\n    output: TParams[\"_routeOptions\"][\"awaitServerData\"] extends false\n      ? null\n      : TOutput extends void | undefined // JSON serialization\n        ? null\n        : TOutput;\n    errorShape: TParams[\"_errorShape\"];\n  }>;\n}\n\nexport type AnyBuiltUploaderTypes = {\n  input: any;\n  output: any;\n  errorShape: any;\n};\n\nexport interface FileRoute<TTypes extends AnyBuiltUploaderTypes> {\n  $types: TTypes;\n  routerConfig: FileRouterInputConfig;\n  routeOptions: RouteOptions;\n  inputParser: JsonParser<any>;\n  middleware: MiddlewareFn<any, ValidMiddlewareObject, any>;\n  onUploadError: UploadErrorFn<any>;\n  errorFormatter: (err: UploadThingError) => any;\n  onUploadComplete: UploadCompleteFn<any, any, any>;\n}\nexport type AnyFileRoute = FileRoute<AnyBuiltUploaderTypes>;\n\n/**\n * Map actionType to the required payload for that action\n * @todo Look into using @effect/rpc :thinking:\n */\nexport type UTEvents = {\n  upload: {\n    in: UploadActionPayload;\n    out: ReadonlyArray<NewPresignedUrl>;\n  };\n};\n\n/**\n * Result from the PUT request to the UploadThing Ingest server\n */\nexport type UploadPutResult<TServerOutput = unknown> = {\n  ufsUrl: string;\n  /**\n   * @deprecated\n   * This field will be removed in uploadthing v9. Use `ufsUrl` instead.\n   */\n  url: string;\n  /**\n   * @deprecated\n   * This field will be removed in uploadthing v9. Use `ufsUrl` instead.\n   */\n  appUrl: string;\n  fileHash: string;\n  serverData: TServerOutput;\n};\n","import * as HttpApp from \"@effect/platform/HttpApp\";\nimport * as HttpBody from \"@effect/platform/HttpBody\";\nimport * as HttpClient from \"@effect/platform/HttpClient\";\nimport type * as HttpClientError from \"@effect/platform/HttpClientError\";\nimport * as HttpClientRequest from \"@effect/platform/HttpClientRequest\";\nimport * as HttpClientResponse from \"@effect/platform/HttpClientResponse\";\nimport * as HttpRouter from \"@effect/platform/HttpRouter\";\nimport * as HttpServerRequest from \"@effect/platform/HttpServerRequest\";\nimport * as HttpServerResponse from \"@effect/platform/HttpServerResponse\";\nimport * as Config from \"effect/Config\";\nimport * as Context from \"effect/Context\";\nimport * as Effect from \"effect/Effect\";\nimport * as Match from \"effect/Match\";\nimport * as Redacted from \"effect/Redacted\";\nimport * as Schema from \"effect/Schema\";\n\nimport {\n  fillInputRouteConfig,\n  generateKey,\n  generateSignedURL,\n  getStatusCodeFromError,\n  matchFileType,\n  objectKeys,\n  UploadThingError,\n  verifySignature,\n} from \"@uploadthing/shared\";\n\nimport * as pkgJson from \"../../package.json\";\nimport type { FileRouter, RouteHandlerOptions } from \"../types\";\nimport { IngestUrl, IsDevelopment, UTToken } from \"./config\";\nimport { logDeprecationWarning } from \"./deprecations\";\nimport { formatError } from \"./error-formatter\";\nimport { handleJsonLineStream } from \"./jsonl\";\nimport { logHttpClientError, logHttpClientResponse } from \"./logger\";\nimport { getParseFn } from \"./parser\";\nimport { assertFilesMeetConfig, extractRouterConfig } from \"./route-config\";\nimport { makeRuntime } from \"./runtime\";\nimport {\n  ActionType,\n  CallbackResultResponse,\n  MetadataFetchResponse,\n  MetadataFetchStreamPart,\n  UploadActionPayload,\n  UploadedFileData,\n  UploadThingHook,\n} from \"./shared-schemas\";\nimport { UTFiles, UTRegion } from \"./types\";\nimport type { AnyFileRoute, UTEvents } from \"./types\";\n\nexport class AdapterArguments extends Context.Tag(\n  \"uploadthing/AdapterArguments\",\n)<AdapterArguments, Record<string, unknown>>() {}\n\n/**\n * Create a request handler adapter for any framework or server library.\n * Refer to the existing adapters for examples on how to use this function.\n * @public\n *\n * @param makeAdapterArgs - Function that takes the args from your framework and returns an Effect that resolves to the adapter args.\n * These args are passed to the `.middleware`, `.onUploadComplete`, and `.onUploadError` hooks.\n * @param toRequest - Function that takes the args from your framework and returns an Effect that resolves to a web Request object.\n * @param opts - The router config and other options that are normally passed to `createRequestHandler` of official adapters\n * @param beAdapter - [Optional] The adapter name of the adapter, used for telemetry purposes\n * @returns A function that takes the args from your framework and returns a promise that resolves to a Response object.\n */\nexport const makeAdapterHandler = <\n  Args extends any[],\n  AdapterArgs extends Record<string, unknown>,\n>(\n  makeAdapterArgs: (...args: Args) => Effect.Effect<AdapterArgs>,\n  toRequest: (...args: Args) => Effect.Effect<Request>,\n  opts: RouteHandlerOptions<FileRouter>,\n  beAdapter?: string,\n): ((...args: Args) => Promise<Response>) => {\n  const managed = makeRuntime(\n    opts.config?.fetch as typeof globalThis.fetch,\n    opts.config,\n  );\n  const handle = Effect.promise(() =>\n    managed.runtime().then(HttpApp.toWebHandlerRuntime),\n  );\n\n  const app = (...args: Args) =>\n    Effect.map(\n      Effect.promise(() =>\n        managed.runPromise(createRequestHandler(opts, beAdapter ?? \"custom\")),\n      ),\n      Effect.provideServiceEffect(AdapterArguments, makeAdapterArgs(...args)),\n    );\n\n  return async (...args: Args) => {\n    const result = await handle.pipe(\n      Effect.ap(app(...args)),\n      Effect.ap(toRequest(...args)),\n      Effect.withLogSpan(\"requestHandler\"),\n      managed.runPromise,\n    );\n\n    return result;\n  };\n};\n\nexport const createRequestHandler = <TRouter extends FileRouter>(\n  opts: RouteHandlerOptions<TRouter>,\n  beAdapter: string,\n) =>\n  Effect.gen(function* () {\n    const isDevelopment = yield* IsDevelopment;\n    const routerConfig = yield* extractRouterConfig(opts.router);\n\n    const handleDaemon = (() => {\n      if (opts.config?.handleDaemonPromise) {\n        return opts.config.handleDaemonPromise;\n      }\n      return isDevelopment ? \"void\" : \"await\";\n    })();\n    if (isDevelopment && handleDaemon === \"await\") {\n      return yield* new UploadThingError({\n        code: \"INVALID_SERVER_CONFIG\",\n        message: 'handleDaemonPromise: \"await\" is forbidden in development.',\n      });\n    }\n\n    const GET = Effect.gen(function* () {\n      return yield* HttpServerResponse.json(routerConfig);\n    });\n\n    const POST = Effect.gen(function* () {\n      const {\n        \"uploadthing-hook\": uploadthingHook,\n        \"x-uploadthing-package\": fePackage,\n        \"x-uploadthing-version\": clientVersion,\n      } = yield* HttpServerRequest.schemaHeaders(\n        Schema.Struct({\n          \"uploadthing-hook\": UploadThingHook.pipe(Schema.optional),\n          \"x-uploadthing-package\": Schema.String.pipe(\n            Schema.optionalWith({ default: () => \"unknown\" }),\n          ),\n          \"x-uploadthing-version\": Schema.String.pipe(\n            Schema.optionalWith({ default: () => pkgJson.version }),\n          ),\n        }),\n      );\n\n      if (clientVersion !== pkgJson.version) {\n        const serverVersion = pkgJson.version;\n        yield* Effect.logWarning(\n          \"Client version mismatch. Things may not work as expected, please sync your versions to ensure compatibility.\",\n        ).pipe(Effect.annotateLogs({ clientVersion, serverVersion }));\n      }\n\n      const { slug, actionType } = yield* HttpRouter.schemaParams(\n        Schema.Struct({\n          actionType: ActionType.pipe(Schema.optional),\n          slug: Schema.String,\n        }),\n      );\n\n      const uploadable = opts.router[slug];\n      if (!uploadable) {\n        const msg = `No file route found for slug ${slug}`;\n        yield* Effect.logError(msg);\n        return yield* new UploadThingError({\n          code: \"NOT_FOUND\",\n          message: msg,\n        });\n      }\n\n      const { body, fiber } = yield* Match.value({\n        actionType,\n        uploadthingHook,\n      }).pipe(\n        Match.when({ actionType: \"upload\", uploadthingHook: undefined }, () =>\n          handleUploadAction({\n            uploadable,\n            fePackage,\n            beAdapter,\n            slug,\n          }),\n        ),\n        Match.when({ actionType: undefined, uploadthingHook: \"callback\" }, () =>\n          handleCallbackRequest({ uploadable, fePackage, beAdapter }),\n        ),\n        Match.when({ actionType: undefined, uploadthingHook: \"error\" }, () =>\n          handleErrorRequest({ uploadable }),\n        ),\n        Match.orElse(() => Effect.succeed({ body: null, fiber: null })),\n      );\n\n      if (fiber) {\n        yield* Effect.logDebug(\"Running fiber as daemon\").pipe(\n          Effect.annotateLogs(\"handleDaemon\", handleDaemon),\n        );\n        if (handleDaemon === \"void\") {\n          // noop\n        } else if (handleDaemon === \"await\") {\n          yield* fiber.await;\n        } else if (typeof handleDaemon === \"function\") {\n          handleDaemon(Effect.runPromise(fiber.await));\n        }\n      }\n\n      yield* Effect.logDebug(\"Sending response\").pipe(\n        Effect.annotateLogs(\"body\", body),\n      );\n\n      return yield* HttpServerResponse.json(body);\n    }).pipe(\n      Effect.catchTags({\n        ParseError: (e) =>\n          HttpServerResponse.json(\n            formatError(\n              new UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: \"Invalid input\",\n                cause: e.message,\n              }),\n              opts.router,\n            ),\n            { status: 400 },\n          ),\n        UploadThingError: (e) =>\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n          HttpServerResponse.json(formatError(e, opts.router), {\n            status: getStatusCodeFromError(e),\n          }),\n      }),\n    );\n\n    const appendResponseHeaders = Effect.map(\n      HttpServerResponse.setHeader(\"x-uploadthing-version\", pkgJson.version),\n    );\n\n    return HttpRouter.empty.pipe(\n      HttpRouter.get(\"*\", GET),\n      HttpRouter.post(\"*\", POST),\n      HttpRouter.use(appendResponseHeaders),\n    );\n  }).pipe(Effect.withLogSpan(\"createRequestHandler\"));\n\nconst handleErrorRequest = (opts: { uploadable: AnyFileRoute }) =>\n  Effect.gen(function* () {\n    const { uploadable } = opts;\n    const request = yield* HttpServerRequest.HttpServerRequest;\n    const { apiKey } = yield* UTToken;\n    const verified = yield* verifySignature(\n      yield* request.text,\n      request.headers[\"x-uploadthing-signature\"] ?? null,\n      apiKey,\n    );\n    yield* Effect.logDebug(`Signature verified: ${verified}`);\n    if (!verified) {\n      yield* Effect.logError(\"Invalid signature\");\n      return yield* new UploadThingError({\n        code: \"BAD_REQUEST\",\n        message: \"Invalid signature\",\n      });\n    }\n\n    const requestInput = yield* HttpServerRequest.schemaBodyJson(\n      Schema.Struct({\n        fileKey: Schema.String,\n        error: Schema.String,\n      }),\n    );\n    yield* Effect.logDebug(\"Handling error callback request with input:\").pipe(\n      Effect.annotateLogs(\"json\", requestInput),\n    );\n\n    const adapterArgs = yield* AdapterArguments;\n    const fiber = yield* Effect.tryPromise({\n      try: async () =>\n        uploadable.onUploadError({\n          ...adapterArgs,\n          error: new UploadThingError({\n            code: \"UPLOAD_FAILED\",\n            message: `Upload failed for ${requestInput.fileKey}: ${requestInput.error}`,\n          }),\n          fileKey: requestInput.fileKey,\n        }),\n      catch: (error) =>\n        new UploadThingError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to run onUploadError\",\n          cause: error,\n        }),\n    })\n      .pipe(\n        Effect.tapError((error) =>\n          Effect.logError(\n            \"Failed to run onUploadError. You probably shouldn't be throwing errors here.\",\n          ).pipe(Effect.annotateLogs(\"error\", error)),\n        ),\n      )\n      .pipe(Effect.ignoreLogged, Effect.forkDaemon);\n\n    return {\n      body: null,\n      fiber,\n    };\n  }).pipe(Effect.withLogSpan(\"handleErrorRequest\"));\n\nconst handleCallbackRequest = (opts: {\n  uploadable: AnyFileRoute;\n  fePackage: string;\n  beAdapter: string;\n}) =>\n  Effect.gen(function* () {\n    const { uploadable, fePackage, beAdapter } = opts;\n    const request = yield* HttpServerRequest.HttpServerRequest;\n    const { apiKey } = yield* UTToken;\n    const verified = yield* verifySignature(\n      yield* request.text,\n      request.headers[\"x-uploadthing-signature\"] ?? null,\n      apiKey,\n    );\n    yield* Effect.logDebug(`Signature verified: ${verified}`);\n    if (!verified) {\n      yield* Effect.logError(\"Invalid signature\");\n      return yield* new UploadThingError({\n        code: \"BAD_REQUEST\",\n        message: \"Invalid signature\",\n      });\n    }\n\n    const requestInput = yield* HttpServerRequest.schemaBodyJson(\n      Schema.Struct({\n        status: Schema.String,\n        file: UploadedFileData,\n        origin: Schema.String,\n        metadata: Schema.Record({ key: Schema.String, value: Schema.Unknown }),\n      }),\n    );\n    yield* Effect.logDebug(\"Handling callback request with input:\").pipe(\n      Effect.annotateLogs(\"json\", requestInput),\n    );\n\n    /**\n     * Run `.onUploadComplete` as a daemon to prevent the\n     * request from UT to potentially timeout.\n     */\n    const fiber = yield* Effect.gen(function* () {\n      const adapterArgs = yield* AdapterArguments;\n      const serverData = yield* Effect.tryPromise({\n        try: async () =>\n          uploadable.onUploadComplete({\n            ...adapterArgs,\n            file: {\n              ...requestInput.file,\n              get url() {\n                logDeprecationWarning(\n                  \"`file.url` is deprecated and will be removed in uploadthing v9. Use `file.ufsUrl` instead.\",\n                );\n                return requestInput.file.url;\n              },\n              get appUrl() {\n                logDeprecationWarning(\n                  \"`file.appUrl` is deprecated and will be removed in uploadthing v9. Use `file.ufsUrl` instead.\",\n                );\n                return requestInput.file.appUrl;\n              },\n            },\n            metadata: requestInput.metadata,\n          }) as Promise<unknown>,\n        catch: (error) =>\n          new UploadThingError({\n            code: \"INTERNAL_SERVER_ERROR\",\n            message:\n              \"Failed to run onUploadComplete. You probably shouldn't be throwing errors here.\",\n            cause: error,\n          }),\n      });\n      const payload = {\n        fileKey: requestInput.file.key,\n        callbackData: serverData ?? null,\n      };\n      yield* Effect.logDebug(\n        \"'onUploadComplete' callback finished. Sending response to UploadThing:\",\n      ).pipe(Effect.annotateLogs(\"callbackData\", payload));\n\n      const httpClient = (yield* HttpClient.HttpClient).pipe(\n        HttpClient.filterStatusOk,\n      );\n\n      yield* HttpClientRequest.post(`/callback-result`).pipe(\n        HttpClientRequest.prependUrl(requestInput.origin),\n        HttpClientRequest.setHeaders({\n          \"x-uploadthing-api-key\": Redacted.value(apiKey),\n          \"x-uploadthing-version\": pkgJson.version,\n          \"x-uploadthing-be-adapter\": beAdapter,\n          \"x-uploadthing-fe-package\": fePackage,\n        }),\n        HttpClientRequest.bodyJson(payload),\n        Effect.flatMap(httpClient.execute),\n        Effect.tapError(\n          logHttpClientError(\"Failed to register callback result\"),\n        ),\n        Effect.flatMap(\n          HttpClientResponse.schemaBodyJson(CallbackResultResponse),\n        ),\n        Effect.tap(Effect.log(\"Sent callback result to UploadThing\")),\n        Effect.scoped,\n      );\n    }).pipe(Effect.ignoreLogged, Effect.forkDaemon);\n\n    return { body: null, fiber };\n  }).pipe(Effect.withLogSpan(\"handleCallbackRequest\"));\n\nconst runRouteMiddleware = (opts: {\n  json: typeof UploadActionPayload.Type;\n  uploadable: AnyFileRoute;\n}) =>\n  Effect.gen(function* () {\n    const {\n      json: { files, input },\n      uploadable,\n    } = opts;\n\n    yield* Effect.logDebug(\"Running middleware\");\n    const adapterArgs = yield* AdapterArguments;\n    const metadata = yield* Effect.tryPromise({\n      try: async () =>\n        uploadable.middleware({\n          ...adapterArgs,\n          input,\n          files,\n        }),\n      catch: (error) =>\n        error instanceof UploadThingError\n          ? error\n          : new UploadThingError({\n              code: \"INTERNAL_SERVER_ERROR\",\n              message: \"Failed to run middleware\",\n              cause: error,\n            }),\n    });\n\n    if (metadata[UTFiles] && metadata[UTFiles].length !== files.length) {\n      const msg = `Expected files override to have the same length as original files, got ${metadata[UTFiles].length} but expected ${files.length}`;\n      yield* Effect.logError(msg);\n      return yield* new UploadThingError({\n        code: \"BAD_REQUEST\",\n        message: \"Files override must have the same length as files\",\n        cause: msg,\n      });\n    }\n\n    // Attach customIds from middleware to the files\n    const filesWithCustomIds = yield* Effect.forEach(files, (file, idx) =>\n      Effect.gen(function* () {\n        const theirs = metadata[UTFiles]?.[idx];\n        if (theirs && theirs.size !== file.size) {\n          yield* Effect.logWarning(\n            \"File size mismatch. Reverting to original size\",\n          );\n        }\n        return {\n          name: theirs?.name ?? file.name,\n          size: file.size,\n          type: file.type,\n          customId: theirs?.customId,\n          lastModified: theirs?.lastModified ?? Date.now(),\n        };\n      }),\n    );\n\n    return {\n      metadata,\n      filesWithCustomIds,\n      preferredRegion: metadata[UTRegion],\n    };\n  }).pipe(Effect.withLogSpan(\"runRouteMiddleware\"));\n\nconst handleUploadAction = (opts: {\n  uploadable: AnyFileRoute;\n  fePackage: string;\n  beAdapter: string;\n  slug: string;\n}) =>\n  Effect.gen(function* () {\n    const httpClient = (yield* HttpClient.HttpClient).pipe(\n      HttpClient.filterStatusOk,\n    );\n    const { uploadable, fePackage, beAdapter, slug } = opts;\n    const json = yield* HttpServerRequest.schemaBodyJson(UploadActionPayload);\n    yield* Effect.logDebug(\"Handling upload request\").pipe(\n      Effect.annotateLogs(\"json\", json),\n    );\n\n    // validate the input\n    yield* Effect.logDebug(\"Parsing user input\");\n    const parsedInput = yield* Effect.tryPromise({\n      try: () => getParseFn(uploadable.inputParser)(json.input),\n      catch: (error) =>\n        new UploadThingError({\n          code: \"BAD_REQUEST\",\n          message: \"Invalid input\",\n          cause: error,\n        }),\n    });\n    yield* Effect.logDebug(\"Input parsed successfully\").pipe(\n      Effect.annotateLogs(\"input\", parsedInput),\n    );\n\n    const { metadata, filesWithCustomIds, preferredRegion } =\n      yield* runRouteMiddleware({\n        json: { input: parsedInput, files: json.files },\n        uploadable,\n      });\n\n    yield* Effect.logDebug(\"Parsing route config\").pipe(\n      Effect.annotateLogs(\"routerConfig\", uploadable.routerConfig),\n    );\n    const parsedConfig = yield* fillInputRouteConfig(\n      uploadable.routerConfig,\n    ).pipe(\n      Effect.catchTag(\n        \"InvalidRouteConfig\",\n        (err) =>\n          new UploadThingError({\n            code: \"BAD_REQUEST\",\n            message: \"Invalid route config\",\n            cause: err,\n          }),\n      ),\n    );\n    yield* Effect.logDebug(\"Route config parsed successfully\").pipe(\n      Effect.annotateLogs(\"routeConfig\", parsedConfig),\n    );\n\n    yield* Effect.logDebug(\n      \"Validating files meet the config requirements\",\n    ).pipe(Effect.annotateLogs(\"files\", json.files));\n    yield* assertFilesMeetConfig(json.files, parsedConfig).pipe(\n      Effect.mapError(\n        (e) =>\n          new UploadThingError({\n            code: \"BAD_REQUEST\",\n            message: `Invalid config: ${e._tag}`,\n            cause: \"reason\" in e ? e.reason : e.message,\n          }),\n      ),\n    );\n    yield* Effect.logDebug(\"Files validated.\");\n\n    const fileUploadRequests = yield* Effect.forEach(\n      filesWithCustomIds,\n      (file) =>\n        Effect.map(matchFileType(file, objectKeys(parsedConfig)), (type) => ({\n          name: file.name,\n          size: file.size,\n          type: file.type || type,\n          lastModified: file.lastModified,\n          customId: file.customId,\n          contentDisposition:\n            parsedConfig[type]?.contentDisposition ?? \"inline\",\n          acl: parsedConfig[type]?.acl,\n        })),\n    ).pipe(\n      Effect.catchTags({\n        /** Shouldn't happen since config is validated above so just dying is fine I think */\n        InvalidFileType: (e) => Effect.die(e),\n        UnknownFileType: (e) => Effect.die(e),\n      }),\n    );\n\n    const routeOptions = uploadable.routeOptions;\n    const { apiKey, appId } = yield* UTToken;\n    const ingestUrl = yield* IngestUrl(preferredRegion);\n    const isDev = yield* IsDevelopment;\n\n    yield* Effect.logDebug(\"Generating presigned URLs\").pipe(\n      Effect.annotateLogs(\"fileUploadRequests\", fileUploadRequests),\n      Effect.annotateLogs(\"ingestUrl\", ingestUrl),\n    );\n    const presignedUrls = yield* Effect.forEach(\n      fileUploadRequests,\n      (file) =>\n        Effect.gen(function* () {\n          const key = yield* generateKey(\n            file,\n            appId,\n            routeOptions.getFileHashParts,\n          );\n\n          const url = yield* generateSignedURL(`${ingestUrl}/${key}`, apiKey, {\n            ttlInSeconds: routeOptions.presignedURLTTL,\n            data: {\n              \"x-ut-identifier\": appId,\n              \"x-ut-file-name\": file.name,\n              \"x-ut-file-size\": file.size,\n              \"x-ut-file-type\": file.type,\n              \"x-ut-slug\": slug,\n              \"x-ut-custom-id\": file.customId,\n              \"x-ut-content-disposition\": file.contentDisposition,\n              \"x-ut-acl\": file.acl,\n            },\n          });\n          return { url, key };\n        }),\n      { concurrency: \"unbounded\" },\n    );\n\n    const serverReq = yield* HttpServerRequest.HttpServerRequest;\n    const requestUrl = yield* HttpServerRequest.toURL(serverReq);\n\n    const devHookRequest = yield* Config.string(\"callbackUrl\").pipe(\n      Config.withDefault(requestUrl.origin + requestUrl.pathname),\n      Effect.map((url) =>\n        HttpClientRequest.post(url).pipe(\n          HttpClientRequest.appendUrlParam(\"slug\", slug),\n        ),\n      ),\n    );\n\n    const metadataRequest = HttpClientRequest.post(\"/route-metadata\").pipe(\n      HttpClientRequest.prependUrl(ingestUrl),\n      HttpClientRequest.setHeaders({\n        \"x-uploadthing-api-key\": Redacted.value(apiKey),\n        \"x-uploadthing-version\": pkgJson.version,\n        \"x-uploadthing-be-adapter\": beAdapter,\n        \"x-uploadthing-fe-package\": fePackage,\n      }),\n      HttpClientRequest.bodyJson({\n        fileKeys: presignedUrls.map(({ key }) => key),\n        metadata: metadata,\n        isDev,\n        callbackUrl: devHookRequest.url,\n        callbackSlug: slug,\n        awaitServerData: routeOptions.awaitServerData ?? true,\n      }),\n      Effect.flatMap(httpClient.execute),\n    );\n\n    const handleDevStreamError = Effect.fn(\"handleDevStreamError\")(function* (\n      err: HttpClientError.ResponseError,\n      chunk: string,\n    ) {\n      const schema = Schema.parseJson(\n        Schema.Struct({ file: UploadedFileData }),\n      );\n      const parsedChunk = yield* Schema.decodeUnknown(schema)(chunk);\n      const key = parsedChunk.file.key;\n\n      yield* Effect.logError(\n        \"Failed to forward callback request from dev stream\",\n      ).pipe(Effect.annotateLogs({ fileKey: key, error: err.message }));\n\n      const httpResponse = yield* HttpClientRequest.post(\n        \"/callback-result\",\n      ).pipe(\n        HttpClientRequest.prependUrl(ingestUrl),\n        HttpClientRequest.setHeaders({\n          \"x-uploadthing-api-key\": Redacted.value(apiKey),\n          \"x-uploadthing-version\": pkgJson.version,\n          \"x-uploadthing-be-adapter\": beAdapter,\n          \"x-uploadthing-fe-package\": fePackage,\n        }),\n        HttpClientRequest.bodyJson({\n          fileKey: key,\n          error: `Failed to forward callback request from dev stream: ${err.message}`,\n        }),\n        Effect.flatMap(httpClient.execute),\n      );\n\n      yield* logHttpClientResponse(\"Reported callback error to UploadThing\")(\n        httpResponse,\n      );\n    });\n\n    // Send metadata to UT server (non blocking as a daemon)\n    // In dev, keep the stream open and simulate the callback requests as\n    // files complete uploading\n    const fiber = yield* Effect.if(isDev, {\n      onTrue: () =>\n        metadataRequest.pipe(\n          Effect.tapBoth({\n            onSuccess: logHttpClientResponse(\"Registered metadata\", {\n              mixin: \"None\", // We're reading the stream so can't call a body mixin\n            }),\n            onFailure: logHttpClientError(\"Failed to register metadata\"),\n          }),\n          HttpClientResponse.stream,\n          handleJsonLineStream(MetadataFetchStreamPart, (chunk) =>\n            devHookRequest.pipe(\n              HttpClientRequest.setHeaders({\n                \"uploadthing-hook\": chunk.hook,\n                \"x-uploadthing-signature\": chunk.signature,\n              }),\n              HttpClientRequest.setBody(\n                HttpBody.text(chunk.payload, \"application/json\"),\n              ),\n              httpClient.execute,\n              Effect.tap(\n                logHttpClientResponse(\n                  \"Successfully forwarded callback request from dev stream\",\n                ),\n              ),\n              Effect.catchTag(\"ResponseError\", (err) =>\n                handleDevStreamError(err, chunk.payload),\n              ),\n              Effect.annotateLogs(chunk),\n              Effect.asVoid,\n              Effect.ignoreLogged,\n              Effect.scoped,\n            ),\n          ),\n        ),\n      onFalse: () =>\n        metadataRequest.pipe(\n          Effect.tapBoth({\n            onSuccess: logHttpClientResponse(\"Registered metadata\"),\n            onFailure: logHttpClientError(\"Failed to register metadata\"),\n          }),\n          Effect.flatMap(\n            HttpClientResponse.schemaBodyJson(MetadataFetchResponse),\n          ),\n          Effect.scoped,\n        ),\n    }).pipe(Effect.forkDaemon);\n\n    const presigneds = presignedUrls.map((p, i) => ({\n      url: p.url,\n      key: p.key,\n      name: fileUploadRequests[i]!.name,\n      customId: fileUploadRequests[i]!.customId ?? null,\n    }));\n\n    yield* Effect.logInfo(\"Sending presigned URLs to client\").pipe(\n      Effect.annotateLogs(\"presignedUrls\", presigneds),\n    );\n\n    return {\n      body: presigneds satisfies UTEvents[\"upload\"][\"out\"],\n      fiber,\n    };\n  }).pipe(Effect.withLogSpan(\"handleUploadAction\"));\n","import type {\n  FileRouterInputConfig,\n  Json,\n  RouteOptions,\n  UploadThingError,\n} from \"@uploadthing/shared\";\n\nimport { defaultErrorFormatter } from \"./error-formatter\";\nimport type {\n  AnyBuiltUploaderTypes,\n  AnyFileRoute,\n  UnsetMarker,\n  UploadBuilder,\n} from \"./types\";\n\nfunction internalCreateBuilder<\n  TAdapterFnArgs extends Record<string, unknown>,\n  TRouteOptions extends RouteOptions,\n  TErrorShape extends Json = { message: string },\n>(\n  initDef: Partial<AnyFileRoute> = {},\n): UploadBuilder<{\n  _routeOptions: TRouteOptions;\n  _input: { in: UnsetMarker; out: UnsetMarker };\n  _metadata: UnsetMarker;\n  _adapterFnArgs: TAdapterFnArgs;\n  _errorShape: TErrorShape;\n  _errorFn: UnsetMarker;\n  _output: UnsetMarker;\n}> {\n  const _def: AnyFileRoute = {\n    $types: {} as AnyBuiltUploaderTypes,\n    // Default router config\n    routerConfig: {\n      image: {\n        maxFileSize: \"4MB\",\n      },\n    },\n    routeOptions: {\n      awaitServerData: true,\n    },\n\n    inputParser: {\n      parseAsync: () => Promise.resolve(undefined),\n      _input: undefined,\n      _output: undefined,\n    },\n\n    middleware: () => ({}),\n    onUploadError: () => {\n      // noop\n    },\n    onUploadComplete: () => undefined,\n\n    errorFormatter: initDef.errorFormatter ?? defaultErrorFormatter,\n\n    // Overload with properties passed in\n    ...initDef,\n  };\n\n  return {\n    input(userParser) {\n      return internalCreateBuilder({\n        ..._def,\n        inputParser: userParser,\n      }) as UploadBuilder<any>;\n    },\n    middleware(userMiddleware) {\n      return internalCreateBuilder({\n        ..._def,\n        middleware: userMiddleware,\n      }) as UploadBuilder<any>;\n    },\n    onUploadComplete(userUploadComplete) {\n      return {\n        ..._def,\n        onUploadComplete: userUploadComplete,\n      } as AnyFileRoute;\n    },\n    onUploadError(userOnUploadError) {\n      return internalCreateBuilder({\n        ..._def,\n        onUploadError: userOnUploadError,\n      }) as UploadBuilder<any>;\n    },\n  };\n}\n\nexport type CreateBuilderOptions<TErrorShape extends Json> = {\n  errorFormatter: (err: UploadThingError) => TErrorShape;\n};\n\n/**\n * Create a builder for your backend adapter.\n * Refer to the existing adapters for examples on how to use this function.\n * @public\n *\n * @param opts - Options for the builder\n * @returns A file route builder for making UploadThing file routes\n */\nexport function createBuilder<\n  TAdapterFnArgs extends Record<string, unknown>,\n  TErrorShape extends Json = { message: string },\n>(opts?: CreateBuilderOptions<TErrorShape>) {\n  return <TRouteOptions extends RouteOptions>(\n    input: FileRouterInputConfig,\n    config?: TRouteOptions,\n  ): UploadBuilder<{\n    _routeOptions: TRouteOptions;\n    _input: { in: UnsetMarker; out: UnsetMarker };\n    _metadata: UnsetMarker;\n    _adapterFnArgs: TAdapterFnArgs;\n    _errorShape: TErrorShape;\n    _errorFn: UnsetMarker;\n    _output: UnsetMarker;\n  }> => {\n    return internalCreateBuilder<TAdapterFnArgs, TRouteOptions, TErrorShape>({\n      routerConfig: input,\n      routeOptions: config ?? {},\n      ...opts,\n    });\n  };\n}\n"],"names":["options: unknown","preferredRegion: string | undefined","error: UploadThingError","router: FileRouter","schema: S.Schema<TChunk>","onChunk: (chunk: TChunk) => Effect.Effect<void>","stream: Stream.Stream<Uint8Array, E, R>","validChunks: unknown[]","name?: string","level","Layer","message: string","opts?: {\n    /** Level to log on, default \"Debug\" */\n    level?: LogLevel.Literal;\n    /** What body mixin to use to get the response body, default \"json\" */\n    mixin?: HttpClientResponseMixinMethod;\n  }","response: HttpClientResponse.HttpClientResponse","Effect","err: HttpClientError.HttpClientError | HttpBody.HttpBodyError","parser: TParser","type: FileRouterInputKey","max: FileSize","actual: number","boundtype: \"minimum\" | \"maximum\"","bound: number","files: S.Schema.Type<typeof UploadActionPayload>[\"files\"]","routeConfig: ExpandedRouteConfig","counts: Record<string, number>","router: TRouter","fetch: FetchEsque","config: unknown","makeAdapterArgs: (...args: Args) => Effect.Effect<AdapterArgs>","toRequest: (...args: Args) => Effect.Effect<Request>","opts: RouteHandlerOptions<FileRouter>","beAdapter?: string","opts: RouteHandlerOptions<TRouter>","beAdapter: string","Schema","opts: { uploadable: AnyFileRoute }","opts: {\n  uploadable: AnyFileRoute;\n  fePackage: string;\n  beAdapter: string;\n}","opts: {\n  json: typeof UploadActionPayload.Type;\n  uploadable: AnyFileRoute;\n}","opts: {\n  uploadable: AnyFileRoute;\n  fePackage: string;\n  beAdapter: string;\n  slug: string;\n}","err: HttpClientError.ResponseError","chunk: string","initDef: Partial<AnyFileRoute>","_def: AnyFileRoute","opts?: CreateBuilderOptions<TErrorShape>","input: FileRouterInputConfig","config?: TRouteOptions"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAqBA,MAAM,eAAc,eAAe,wJAAA,EAAS,EAAC,IAAA,+JAC3C,SAAe,EAAO,IAAP,8JACb,UAAe,EACb,GADa,CACT,IACF,OAAO,OAAA,+JACL,6BAAA,EAGI,OAAO,wBAGN,OAAO,CAAE,EACb,CACF,GAEH;QACE,WAAW;IACZ,EACF,CACF,gKACD,SAAe,EAAO,IAAP,UAAqB,4JACpC,eAAe,CAChB;;;;;GAOD,MAAa,iBAAiB,CAACA,wKAC7B,WAAe,EAAS,EAAT,SAAoB,CAAE,EAAC,CAAC,IAAA,+JACrC,SAAe,EAAO,IAAP,AAAa,YAAY,CACzC;AAEH,MAAa,sKAAgB,SAAO,CAAA,EAAQ,QAAQ,CAAC,IAAA,uJACnD,SAAO,EAAO,0JACZ,SAAO,CAAA,EAAA,OACE,YAAY,cAAc,QAAQ,IAAI,sCAAA,KAAA,EAC9C,CAAC,IAAA,uJAAK,MAAO,EAAI,CAAJ,AAAK,IAAM,MAAM,cAAc,CAAC,CAC/C,wJACD,SAAO,KAAA,EAAY,MAAM,CAC1B;AAED,MAAa,gLAAU,IAAE,KAAA,EAAO,gLAAS,qBAAA,CAAiB,CAAC,IAAA,uJACzD,SAAO,GAAA,EAAU;IACf,aAAa,CAAC,IACZ,8JAAI,oBAAA,CAAiB;YACnB,MAAM,EAAE,GAAA,KAAQ,gBAAgB,0BAA0B;YAC1D,SACE,EAAE,GAAA,KAAQ,gBACN,0HACA;YACN,OAAO;QACR;AACJ,EAAC,CACH;AAED,MAAa,SAAS,SAAO,sJAAA,EAAO,SAAS,CAAC,IAAA,uJAC5C,SAAO,KAAA,EAAY,8BAA8B,wJACjD,SAAO,IAAA,EAAW,CAAC,IAAM,IAAI,IAAI,GAAG,wJACpC,MAAO,EAAI,CAAJ,AAAK,MAAQ,IAAI,IAAA,CAAK,OAAA,CAAQ,OAAO,GAAG,CAAC,CACjD;AAED,MAAa,YAAY,SAAO,kJAAA,EAAG,UACjCC,eAAAA,EACA;IACA,MAAM,EAAE,OAAA,EAAS,UAAA,EAAY,GAAG,OAAO;IAEvC,MAAM,SAAS,kBACV,QAAQ,IAAA,CAAK,CAAC,IAAM,MAAM,gBAAgB,IAAI,OAAA,CAAQ,EAAA,GACvD,OAAA,CAAQ,EAAA;IAEZ,OAAO,6JAAO,SAAO,EAAO,YAAY,CAAC,IAAA,uJACvC,SAAO,KAAA,EAAA,CAAa,QAAA,EAAU,OAAO,CAAA,EAAG,WAAW,CAAA,CAAE,uJACrD,SAAO,KAAA,EAAW,CAAC,IAAM,IAAI,IAAI,GAAG,wJACpC,MAAO,EAAI,CAAC,AAAL,MAAa,IAAI,IAAA,CAAK,OAAA,CAAQ,OAAO,GAAG,CAAC,CACjD;AACF,EAAC;AAEF,MAAa,eAAW,SAAO,kJAAA,EAAO,WAAW,CAAC,IAAA,uJAChD,SAAO,KAAA,EAAY,UAAU,CAC9B;AAED,MAAa,gKAAU,SAAO,EAAO,UAAU,CAAC,IAAA,uJAC9C,SAAO,KAAA,EAAY,SAAS,CAC7B;AAED,MAAa,yKAAmB,SAAO,CAAA,EACrC,aACA,OACD,CAAC,mBAAmB,CAAC,IAAA,sJAAK,SAAO,MAAA,EAAY,YAAY,CAAC;;;AC3G3D,SAAgB,sBAAsBC,KAAAA,EAAyB;IAC7D,OAAO;QACL,SAAS,MAAM,OAAA;IAChB;AACF;AAED,SAAgB,YACdA,KAAAA,EACAC,MAAAA,EACqC;IACrC,MAAM,YAAY,OAAO,IAAA,CAAK,OAAO,CAAC,EAAA;IACtC,MAAM,iBAAiB,YAClB,MAAA,CAAO,UAAA,EAAY,kBAAkB,wBACtC;IAEJ,OAAO,eAAe,MAAM;AAC7B;;;AChBD,MAAa,uBACX,CACEC,QACAC,UAEF,CAAOC,WAA4C;QACjD,IAAI,MAAM;QAEV,OAAO,OAAO,IAAA,uJACZ,OAAO,MAAA,EAAY,GACnB,OAAO,2JAAA,EAAU,CAAC,8JAChB,MAAO,EAAI,CAAJ,YAAiB;gBACtB,OAAO;gBAGP,MAAM,QAAQ,IAAI,KAAA,CAAM,KAAK;gBAC7B,MAAMC,cAAyB,CAAE,CAAA;gBAEjC,KAAK,MAAM,QAAQ,MACjB,IAAI;oBAEF,YAAY,IAAA,CAAK,KAAK,KAAA,CAAM,KAAK,CAAY;oBAE7C,MAAM,IAAI,KAAA,CAAM,KAAK,MAAA,GAAS,EAAE;gBACjC,EAAA,OAAO,CAEP;gBAGH,6JAAO,SAAO,EAAA,EAAS,kBAAkB,CAAC,IAAA,uJACxC,SAAO,MAAA,EAAa,SAAS,MAAM,wJACnC,SAAO,MAAA,EAAa,gBAAgB,YAAY,wJAChD,SAAO,MAAA,EAAa,OAAO,IAAI,CAChC;gBAED,OAAO;YACR,EAAC,CACH,EACD,OAAO,2JAAA,wKAAU,EAAE,cAAA,wKAAc,EAAE,MAAA,EAAM,OAAO,CAAC,CAAC,wJAClD,OAAO,KAAA,wJAAU,SAAO,CAAA,EAAQ,CAAC,OAAS,QAAQ,KAAK,CAAC,CAAC,oJACzD,OAAO,IAAA,wJACP,SAAO,KAAA,EAAY,uBAAuB,CAC3C;IACF;;;;;;;;GC1BH,MAAM,iBAAiB,CAACC,SAAoD;IAC1E,MAAM,+JAAS,SAAO,GAAA,wJAAU,SAAO,EAAQ,GAAE,CAAC,YAAY;QAC5D,MAAM,4JAAQ,SAAS,GAAA,CAAU,IAAA,CAAK,CAACC,UAAUA,QAAM,IAAA,KAAS,QAAQ;QACxE,OAAO,UAAA,KAAA,0JACH,OAAO,EAAA,2JACL,YAAY,EAAA,EACV,CAAE,CAAA,EAAA,CACD,kCAAA,EAAoC,QAAQ,CAAA,CAC9C,CACF,yJACD,QAAO,CAAA,CAAM,MAAM;IACxB,EAAC;IACF,OAAO,SAAA,KAAA,IAAqB,+JAAS,SAAO,EAAO,QAAQ,KAAK;AACjE;AAED,MAAa,sBAAsB,eAAe,WAAW,CAAC,IAAA,uJAC5D,SAAO,KAAA,sJAAY,OAAS,CAAK,CAAL,CAC5B,SAAO,uJAAA,EAAQ,CAAC,QAAU,kJAAO,eAAA,CAAgB,MAAM,CAAC,wJACxD,SAAO,EAAA,EAAS,CAAC,yJACf,SAAO,GAAA,EAAS,oBAAoB,CAAC,IAAA,uJAAK,SAAO,MAAA,EAAa,SAAS,EAAE,CAAC,CAC3E,wJACD,SAAO,EAAA,EACL,eACA,CAAC,IACC,+JAAI,mBAAA,CAAiB;QACnB,MAAM;QACN,SAAS;QACT,OAAO;IACR,GACJ,kJACDC,QAAM,QAAA,CACP;AAED,MAAa,kKAAY,SAAO,CAAA,EAC9B,QACA,UACA,cACA,SACD,CAAC,YAAY;AAGd,MAAa,sKAAgB,MAAO,EAAI,CAAJ,YAAiB;IACnD,MAAM,QAAQ,OAAO;IACrB,MAAM,YAAY,OAAO,UAAU,IAAA,uJACjC,SAAO,KAAA,EAAY,QAAQ,WAAW,OAAO,CAC9C;IACD,OAAO,iJAAA,CAAO,UAAA;AACf,EAAC,CAAC,IAAA,uJACD,SAAO,EAAA,EACL,eACA,CAAC,IACC,+JAAI,mBAAA,CAAiB;QACnB,MAAM;QACN,SAAS;QACT,OAAO;IACR,GACJ,EACDA,QAAM,wJAAA,CACP;AAID,MAAa,wBAAwB,CACnCC,SACAC,SAMG;IACH,MAAM,QAAQ,MAAM,SAAS;IAC7B,MAAM,gKAAQ,SAAS,KAAA,EAAY,MAAM,SAAS,QAAQ;IAE1D,OAAO,CAACC,iKACN,SAAO,CAAA,EAAQ,UAAU,SAAS,QAAA,CAAS,MAAA,qJAASC,OAAO,EAAA,AAAM,0JAC/D,SAAO,MAAA,EAAa,OAAA,CAAQ,EAAE,QAAQ,EAAA,EAAI,SAAS,MAAA,CAAO,CAAA,CAAA,CAAG,CAAC,IAAA,CAC5D,SAAO,4JAAA,EAAa,YAAY,SAAS,CAC1C,CACF;AACJ;AAED,MAAa,qBACX,CAACH,UACD,CAACI,MACC,IAAI,IAAA,KAAS,kBACT,sBAAsB,SAAS;YAAE,OAAO;QAAS,EAAC,CAAC,IAAI,QAAA,CAAS,yJAChE,SAAO,EAAA,EAAS,QAAQ,CAAC,IAAA,uJAAK,SAAO,MAAA,EAAa,SAAS,IAAI,CAAC;;;ACtFxE,IAAa,cAAb,kBAAiC,OAAK,uJAAA,EAAY,cAAc,CAE7D;IACD,UACE,iGAAA;AACH;AAED,SAAgB,WAGdC,MAAAA,EAAgC;IAChC,IAAI,gBAAgB,UAAA,OAAiB,OAAO,UAAA,KAAe;;;IAKzD,OAAO,OAAO,UAAA;IAGhB,0KAAI,SAAO,EAAA,EAAS,OAAO;;IAIzB,OAAO,CAAC,8KACN,SAAO,cAAA,EAAqB,OAAmC,CAC7D,MACD,CAAC,KAAA,CAAM,CAAC,UAAU;YACjB,MAAM,IAAI,YAAY;gBACpB,4JAAO,MAAM,GAAA,EACV,KAAA,oJAA+B,QAAQ,cAAA,CAAA,CACzC;YACF;QACF,EAAC;IAGN,IAAI,eAAe;;;IAKjB,OAAO,OAAO,UAAU;QACtB,MAAM,SAAS,MAAM,MAAA,CAAO,YAAA,CAAa,QAAA,CAAS,MAAM;QACxD,IAAI,OAAO,MAAA,CACT,CAAA,MAAM,IAAI,YAAY;YAAE,OAAO,OAAO,MAAA;QAAQ;QAEhD,OAAO,OAAO,KAAA;IACf;IAGH,MAAM,IAAI,MAAM;AACjB;;;AC/CD,IAAM,mBAAN,8JAA+B,KAAK,GAAA,CAEjC;IACQ,OAAO,mBAAA;IACP,OAAO,wBAAA;IAChB,YAAYC,IAAAA,EAA0BC,GAAAA,EAAeC,MAAAA,CAAgB;QACnE,MAAM,SAAA,CAAU,eAAA,EAAiB,KAAK,eAAA,MAAiB,6KAAA,EAAgB,OAAO,CAAC,iCAAA,EAAmC,IAAI,CAAA;QACtH,KAAA,CAAM;YAAE;QAAQ,EAAC;IAClB;AACF;AAED,IAAM,oBAAN,8JAAgC,KAAK,GAAA,CAElC;IACQ,OAAO,oBAAA;IACP,OAAO,yBAAA;IAChB,YACEF,IAAAA,EACAG,SAAAA,EACAC,KAAAA,EACAF,MAAAA,CACA;QACA,MAAM,SAAA,CAAU,aAAA,EAAe,OAAO,kBAAA,EAAoB,KAAK,WAAA,EAAa,UAAU,kBAAA,EAAoB,MAAM,CAAA;QAEhH,KAAA,CAAM;YAAE;QAAQ,EAAC;IAClB;AACF;AAKD,MAAa,wBAAwB,CACnCG,OACAC,oKAWA,MAAO,EAAI,CAAJ,YAAiB;QACtB,MAAMC,SAAiC,CAAE;QAEzC,KAAK,MAAM,QAAQ,MAAO;YACxB,MAAM,OAAO,sKAAO,gBAAA,EAAc,OAAM,2KAAA,EAAW,YAAY,CAAC;YAChE,MAAA,CAAO,KAAA,GAAA,CAAS,MAAA,CAAO,KAAA,IAAS,CAAA,IAAK;YAErC,MAAM,YAAY,WAAA,CAAY,KAAA,EAAO;YACrC,IAAA,CAAK,UACH,CAAA,OAAO,OAAO,+JAAI,0BAAA,CAAwB,MAAM;YAElD,MAAM,iBAAiB,OAAO,iLAAA,EAAgB,UAAU;YAExD,IAAI,KAAK,IAAA,GAAO,eACd,CAAA,OAAO,OAAO,IAAI,iBAAiB,MAAM,WAAW,KAAK,IAAA;QAE5D;QAED,IAAK,MAAM,QAAQ,OAAQ;YACzB,MAAM,MAAM;YACZ,MAAM,SAAS,WAAA,CAAY,IAAA;YAC3B,IAAA,CAAK,OAAQ,CAAA,OAAO,OAAO,+JAAI,0BAAA,CAAwB;YAEvD,MAAM,QAAQ,MAAA,CAAO,IAAA;YACrB,MAAM,MAAM,OAAO,YAAA;YACnB,MAAM,MAAM,OAAO,YAAA;YAEnB,IAAI,MAAM,IACR,CAAA,OAAO,OAAO,IAAI,8KAAA,CAAiB;gBACjC,MAAM;gBACN,SACE;gBACF,OAAA,CAAQ,oDAAA,EAAsD,IAAI,OAAA,EAAS,IAAI,GAAA,EAAK,IAAI,CAAA;YACzF;YAGH,IAAI,SAAS,QAAQ,QAAQ,IAC3B,CAAA,OAAO,OAAO,IAAI,kBAAkB,KAAK,WAAW,KAAK;YAE3D,IAAI,SAAS,QAAQ,QAAQ,IAC3B,CAAA,OAAO,OAAO,IAAI,kBAAkB,KAAK,WAAW,KAAK;QAE5D;QAED,OAAO;IACR,EAAC;AAEJ,MAAa,sBAAsB,CACjCC,+JAEA,SAAO,CAAA,MAAQ,wKAAA,EAAW,OAAO,EAAE,CAAC,6JAClC,MAAO,GAAA,8JAAI,uBAAA,EAAqB,MAAA,CAAO,KAAA,CAAO,YAAA,CAAa,EAAE,CAAC,SAAA,CAAY;gBACxE;gBACA;YACD,CAAA,EAAE,CACJ;;;ACjHH,MAAa,cAAc,CAACC,OAAmBC,WAAoB;IACjE,MAAM,uKAAkB,MAAM,SAAA,EAC5B,gBAAgB,iKAAA,EAChB,MAAM,yJAAA,0KAAQ,SAAgB,EAAO,KAAP,CAAwC,CACvE;IAED,MAAM,2KAAsB,MAAM,UAAA,0JAChC,SAAS,mKAAO,QAAQ,eAAA,EAAsB,CAAC,IAC7C,EAAE,MAAA,CAAO;YAAC,uBAAwB;SAAA,CAAC,CACpC,CACF;IAED,MAAM,6JAAQ,MAAM,IAAA,uJAClB,MAAM,KAAA,EACJ,eACA,qBACA,iBACA,oBACD,uJACD,MAAM,cAAA,EAAkB,eAAe,OAAO,CAAC,CAChD;IACD,qKAAO,OAAe,EAAK,MAAL,AAAW;AAClC;;;;;GCGD,MAAa,WAAW,OAAO,4BAA4B;;;;;;;;;;;;;;GAgB3D,MAAa,UAAU,OAAO,+BAA+B;;;ACH7D,IAAa,mBAAb,qKAAsC,MAAQ,EAAA,AAC5C,+BACD,EAA6C,CAAC;AAAE;;;;;;;;;;;;GAcjD,MAAa,qBAAqB,CAIhCC,iBACAC,WACAC,MACAC,cAC2C;IAC3C,MAAM,UAAU,YACd,KAAK,MAAA,EAAQ,OACb,KAAK,MAAA,CACN;IACD,MAAM,+JAAS,OAAO,GAAA,EAAQ,IAC5B,QAAQ,OAAA,EAAS,CAAC,IAAA,kKAAK,QAAQ,cAAA,CAAoB,CACpD;IAED,MAAM,MAAM,CAAC,GAAG,6JACd,MAAO,CAAA,uJACL,OAAO,GAAA,EAAQ,IACb,QAAQ,UAAA,CAAW,qBAAqB,MAAM,aAAa,SAAS,CAAC,CACtE,wJACD,OAAO,gBAAA,EAAqB,kBAAkB,gBAAgB,GAAG,KAAK,CAAC,CACxE;IAEH,OAAO,OAAO,GAAG,SAAe;QAC9B,MAAM,SAAS,MAAM,OAAO,IAAA,sJAC1B,MAAO,CAAA,CAAG,IAAI,GAAG,KAAK,CAAC,wJACvB,KAAO,EAAA,AAAG,UAAU,GAAG,KAAK,CAAC,wJAC7B,OAAO,OAAA,EAAY,iBAAiB,EACpC,QAAQ,UAAA,CACT;QAED,OAAO;IACR;AACF;AAED,MAAa,uBAAuB,CAClCC,MACAC,kKAEA,MAAO,CAAA,CAAI,aAAa;QACtB,MAAM,gBAAgB,OAAO;QAC7B,MAAM,eAAe,OAAO,oBAAoB,KAAK,MAAA,CAAO;QAE5D,MAAM,eAAe,CAAC,MAAM;YAC1B,IAAI,KAAK,MAAA,EAAQ,oBACf,CAAA,OAAO,KAAK,MAAA,CAAO,mBAAA;YAErB,OAAO,gBAAgB,SAAS;QACjC,CAAA,GAAG;QACJ,IAAI,iBAAiB,iBAAiB,QACpC,CAAA,OAAO,OAAO,+JAAI,mBAAA,CAAiB;YACjC,MAAM;YACN,SAAS;QACV;QAGH,MAAM,MAAM,OAAO,qJAAA,EAAI,aAAa;YAClC,OAAO,uLAAO,OAAmB,EAAK,UAAL,GAAkB;QACpD,EAAC;QAEF,MAAM,4JAAO,OAAO,EAAI,aAAa;YACnC,MAAM,EACJ,oBAAoB,eAAA,EACpB,yBAAyB,SAAA,EACzB,yBAAyB,aAAA,EAC1B,GAAG,OAAO,kBAAkB,6LAAA,wKAC3B,SAAO,EAAO;gBACZ,2LAAoB,kBAAA,CAAgB,IAAA,mKAAKC,SAAO,EAAA,CAAS;gBACzD,2LAAyB,SAAO,CAAO,IAAA,CACrC,SAAO,4KAAA,EAAa;oBAAE,SAAS,IAAM;gBAAW,EAAC,CAClD;gBACD,2LAAyB,SAAO,CAAO,IAAA,uKACrC,SAAO,MAAA,EAAa;oBAAE,SAAS,IAAA,+JAAA,CAAA,UAAA;gBAAuB,EAAC,CACxD;YACF,EAAC,CACH;YAED,IAAI,kBAAA,+JAAA,CAAA,UAAA,EAAmC;gBACrC,MAAM,gBAAA,+JAAA,CAAA,UAAA;gBACN,6JAAO,OAAO,MAAA,EACZ,+GACD,CAAC,IAAA,uJAAK,OAAO,QAAA,EAAa;oBAAE;oBAAe;gBAAe,EAAC,CAAC;YAC9D;YAED,MAAM,EAAE,IAAA,EAAM,UAAA,EAAY,GAAG,OAAO,WAAW,4KAAA,wKAC7C,SAAO,EAAO;gBACZ,mLAAY,aAAA,CAAW,IAAA,mKAAKA,SAAO,EAAA,CAAS;gBAC5C,wKAAMA,SAAO;YACd,EAAC,CACH;YAED,MAAM,aAAa,KAAK,MAAA,CAAO,KAAA;YAC/B,IAAA,CAAK,YAAY;gBACf,MAAM,MAAA,CAAO,6BAAA,EAA+B,KAAK,CAAA;gBACjD,6JAAO,OAAO,IAAA,EAAS,IAAI;gBAC3B,OAAO,OAAO,+JAAI,mBAAA,CAAiB;oBACjC,MAAM;oBACN,SAAS;gBACV;YACF;YAED,MAAM,EAAE,IAAA,EAAM,KAAA,EAAO,GAAG,4JAAO,MAAM,EAAA,EAAM;gBACzC;gBACA;YACD,EAAC,CAAC,IAAA,EACD,MAAM,qJAAA,EAAK;gBAAE,YAAY;gBAAU,iBAAA,KAAA;YAA4B,GAAE,IAC/D,mBAAmB;oBACjB;oBACA;oBACA;oBACA;gBACD,EAAC,CACH,uJACD,MAAM,CAAA,EAAK;gBAAE,YAAA,KAAA;gBAAuB,iBAAiB;YAAY,GAAE,IACjE,sBAAsB;oBAAE;oBAAY;oBAAW;gBAAW,EAAC,CAC5D,MACD,MAAM,kJAAA,EAAK;gBAAE,YAAA,KAAA;gBAAuB,iBAAiB;YAAS,GAAE,IAC9D,mBAAmB;oBAAE;gBAAY,EAAC,CACnC,uJACD,MAAM,GAAA,EAAO,QAAM,OAAO,qJAAA,EAAQ;oBAAE,MAAM;oBAAM,OAAO;gBAAM,EAAC,CAAC,CAChE;YAED,IAAI,OAAO;gBACT,6JAAO,OAAO,IAAA,EAAS,0BAA0B,CAAC,IAAA,EAChD,OAAO,6JAAA,EAAa,gBAAgB,aAAa,CAClD;gBACD,IAAI,iBAAiB,QAAQ,CAE5B,OAAA,IAAU,iBAAiB,QAC1B,CAAA,OAAO,MAAM,KAAA;gCACG,iBAAiB,WACjC,CAAA,mKAAa,OAAO,MAAA,EAAW,MAAM,KAAA,CAAM,CAAC;YAE/C;YAED,6JAAO,OAAO,IAAA,EAAS,mBAAmB,CAAC,IAAA,CACzC,OAAO,8JAAA,EAAa,QAAQ,KAAK,CAClC;YAED,OAAO,uLAAO,OAAmB,EAAK,KAAK,KAAV;QAClC,EAAC,CAAC,IAAA,sJACD,OAAO,MAAA,EAAU;YACf,YAAY,CAAC,oLACX,OAAmB,EACjB,UADiB,EAEf,8JAAI,oBAAA,CAAiB;oBACnB,MAAM;oBACN,SAAS;oBACT,OAAO,EAAE,OAAA;gBACV,IACD,KAAK,MAAA,CACN,EACD;oBAAE,QAAQ;gBAAK,EAChB;YACH,kBAAkB,CAAC,oLAEjB,OAAmB,EAAK,UAAL,EAAiB,GAAG,KAAK,MAAA,CAAO,EAAE;oBACnD,QAAQ,wLAAA,EAAuB,EAAE;gBAClC,EAAC;QACL,EAAC,CACH;QAED,MAAM,8KAAwB,MAAO,CAAA,iLACnC,YAAmB,EAAU,KAAV,oBAAU,+JAAA,CAAA,UAAA,CAAyC,CACvE;QAED,2KAAO,QAAW,CAAM,EAAN,EAAM,yKACtB,MAAW,EAAI,GAAJ,EAAS,IAAI,0KACxB,OAAW,EAAK,EAAL,GAAU,KAAK,EAC1B,WAAW,mKAAA,EAAI,sBAAsB,CACtC;IACF,EAAC,CAAC,IAAA,uJAAK,OAAO,OAAA,EAAY,uBAAuB,CAAC;AAErD,MAAM,qBAAqB,CAACC,OAC1B,OAAO,qJAAA,EAAI,aAAa;QACtB,MAAM,EAAE,UAAA,EAAY,GAAG;QACvB,MAAM,UAAU,kMAAO,kBAAkB,EAAA;QACzC,MAAM,EAAE,MAAA,EAAQ,GAAG,OAAO;QAC1B,MAAM,WAAW,sKAAO,kBAAA,GACtB,OAAO,QAAQ,IAAA,GACf,QAAQ,OAAA,CAAQ,0BAAA,IAA8B,MAC9C,OACD;QACD,6JAAO,OAAO,IAAA,EAAA,CAAU,oBAAA,EAAsB,SAAS,CAAA,CAAE;QACzD,IAAA,CAAK,UAAU;YACb,OAAO,OAAO,0JAAA,EAAS,oBAAoB;YAC3C,OAAO,OAAO,+JAAI,mBAAA,CAAiB;gBACjC,MAAM;gBACN,SAAS;YACV;QACF;QAED,MAAM,eAAe,sMAAO,iBAAkB,CAAA,KAC5C,SAAO,kKAAA,EAAO;YACZ,2KAASD,SAAO;YAChB,yKAAOA,SAAO;QACf,EAAC,CACH;QACD,6JAAO,OAAO,IAAA,EAAS,8CAA8C,CAAC,IAAA,KACpE,OAAO,0JAAA,EAAa,QAAQ,aAAa,CAC1C;QAED,MAAM,cAAc,OAAO;QAC3B,MAAM,QAAQ,6JAAO,OAAO,MAAA,EAAW;YACrC,KAAK,UACH,WAAW,aAAA,CAAc;oBACvB,GAAG,WAAA;oBACH,OAAO,+JAAI,mBAAA,CAAiB;wBAC1B,MAAM;wBACN,SAAA,CAAU,kBAAA,EAAoB,aAAa,OAAA,CAAQ,EAAA,EAAI,aAAa,KAAA,CAAM,CAAA;oBAC3E;oBACD,SAAS,aAAa,OAAA;gBACvB,EAAC;YACJ,OAAO,CAAC,QACN,+JAAI,mBAAA,CAAiB;oBACnB,MAAM;oBACN,SAAS;oBACT,OAAO;gBACR;QACJ,EAAC,CACC,IAAA,uJACC,OAAO,IAAA,EAAS,CAAC,8JACf,OAAO,IAAA,EACL,+EACD,CAAC,IAAA,uJAAK,OAAO,QAAA,EAAa,SAAS,MAAM,CAAC,CAC5C,CACF,CACA,IAAA,kJAAK,OAAO,SAAA,oJAAc,OAAO,MAAA,CAAW;QAE/C,OAAO;YACL,MAAM;YACN;QACD;IACF,EAAC,CAAC,IAAA,uJAAK,OAAO,OAAA,EAAY,qBAAqB,CAAC;AAEnD,MAAM,wBAAwB,CAACE,6JAK7B,MAAO,CAAA,CAAI,aAAa;QACtB,MAAM,EAAE,UAAA,EAAY,SAAA,EAAW,SAAA,EAAW,GAAG;QAC7C,MAAM,UAAU,OAAO,kBAAkB,6LAAA;QACzC,MAAM,EAAE,MAAA,EAAQ,GAAG,OAAO;QAC1B,MAAM,WAAW,sKAAO,kBAAA,GACtB,OAAO,QAAQ,IAAA,GACf,QAAQ,OAAA,CAAQ,0BAAA,IAA8B,MAC9C,OACD;QACD,4JAAO,OAAO,KAAA,EAAA,CAAU,oBAAA,EAAsB,SAAS,CAAA,CAAE;QACzD,IAAA,CAAK,UAAU;YACb,6JAAO,OAAO,IAAA,EAAS,oBAAoB;YAC3C,OAAO,OAAO,8JAAI,oBAAA,CAAiB;gBACjC,MAAM;gBACN,SAAS;YACV;QACF;QAED,MAAM,eAAe,sMAAO,iBAAkB,CAAA,uKAC5C,SAAO,EAAO;YACZ,0KAAQF,SAAO;YACf,6KAAM,qBAAA;YACN,0KAAQA,SAAO;YACf,gLAAU,SAAO,EAAO;gBAAE,uKAAKA,SAAO;gBAAQ,yKAAOA,SAAO,CAAA;YAAS,EAAC;QACvE,EAAC,CACH;QACD,6JAAO,OAAO,IAAA,EAAS,wCAAwC,CAAC,IAAA,EAC9D,OAAO,6JAAA,EAAa,QAAQ,aAAa,CAC1C;;;;IAMD,MAAM,QAAQ,6JAAO,MAAO,CAAA,CAAI,aAAa;YAC3C,MAAM,cAAc,OAAO;YAC3B,MAAM,aAAa,6JAAO,OAAO,MAAA,EAAW;gBAC1C,KAAK,UACH,WAAW,gBAAA,CAAiB;wBAC1B,GAAG,WAAA;wBACH,MAAM;4BACJ,GAAG,aAAa,IAAA;4BAChB,IAAI,OAAM;gCACR,CAAA,GAAA,iKAAA,CAAA,wBAAA,EACE,6FACD;gCACD,OAAO,aAAa,IAAA,CAAK,GAAA;4BAC1B;4BACD,IAAI,UAAS;gCACX,CAAA,GAAA,iKAAA,CAAA,wBAAA,EACE,gGACD;gCACD,OAAO,aAAa,IAAA,CAAK,MAAA;4BAC1B;wBACF;wBACD,UAAU,aAAa,QAAA;oBACxB,EAAC;gBACJ,OAAO,CAAC,QACN,+JAAI,mBAAA,CAAiB;wBACnB,MAAM;wBACN,SACE;wBACF,OAAO;oBACR;YACJ,EAAC;YACF,MAAM,UAAU;gBACd,SAAS,aAAa,IAAA,CAAK,GAAA;gBAC3B,cAAc,cAAc;YAC7B;YACD,OAAO,OAAO,0JAAA,EACZ,yEACD,CAAC,IAAA,uJAAK,OAAO,QAAA,EAAa,gBAAgB,QAAQ,CAAC;YAEpD,MAAM,aAAa,CAAC,0KAAO,WAAW,GAAA,EAAY,IAAA,qKAChD,WAAW,MAAA,CACZ;YAED,sLAAO,OAAkB,EAAA,CAAM,QAAN,QAAM,CAAA,CAAkB,CAAC,IAAA,gLAChD,aAAkB,EAAW,GAAX,UAAwB,MAAA,CAAO,iLACjD,aAAkB,EAAW,GAAX;gBAChB,yBAAyB,SAAS,uJAAA,EAAM,OAAO;gBAC/C,yBAAA,+JAAA,CAAA,UAAA;gBACA,4BAA4B;gBAC5B,4BAA4B;YAC7B,EAAC,iLACF,WAAkB,EAAS,KAAT,GAAiB,MACnC,OAAO,qJAAA,EAAQ,WAAW,OAAA,CAAQ,wJAClC,OAAO,IAAA,EACL,mBAAmB,qCAAqC,CACzD,wJACD,OAAO,GAAA,EACL,mBAAmB,+KAAA,yKAAe,yBAAA,CAAuB,CAC1D,wJACD,MAAO,CAAA,uJAAI,MAAO,CAAA,CAAI,sCAAsC,CAAC,oJAC7D,OAAO,EAAA,CACR;QACF,EAAC,CAAC,IAAA,mJAAK,OAAO,QAAA,oJAAc,OAAO,MAAA,CAAW;QAE/C,OAAO;YAAE,MAAM;YAAM;QAAO;IAC7B,EAAC,CAAC,IAAA,uJAAK,OAAO,OAAA,EAAY,wBAAwB,CAAC;AAEtD,MAAM,qBAAqB,CAACG,4JAI1B,OAAO,EAAI,aAAa;QACtB,MAAM,EACJ,MAAM,EAAE,KAAA,EAAO,KAAA,EAAO,EACtB,UAAA,EACD,GAAG;QAEJ,4JAAO,OAAO,KAAA,EAAS,qBAAqB;QAC5C,MAAM,cAAc,OAAO;QAC3B,MAAM,WAAW,OAAO,OAAO,4JAAA,EAAW;YACxC,KAAK,UACH,WAAW,UAAA,CAAW;oBACpB,GAAG,WAAA;oBACH;oBACA;gBACD,EAAC;YACJ,OAAO,CAAC,QACN,4KAAiB,mBAAA,GACb,QACA,+JAAI,mBAAA,CAAiB;oBACnB,MAAM;oBACN,SAAS;oBACT,OAAO;gBACR;QACR,EAAC;QAEF,IAAI,QAAA,CAAS,QAAA,IAAY,QAAA,CAAS,QAAA,CAAS,MAAA,KAAW,MAAM,MAAA,EAAQ;YAClE,MAAM,MAAA,CAAO,uEAAA,EAAyE,QAAA,CAAS,QAAA,CAAS,MAAA,CAAO,cAAA,EAAgB,MAAM,MAAA,CAAO,CAAA;YAC5I,6JAAO,OAAO,IAAA,EAAS,IAAI;YAC3B,OAAO,OAAO,+JAAI,mBAAA,CAAiB;gBACjC,MAAM;gBACN,SAAS;gBACT,OAAO;YACR;QACF;QAGD,MAAM,qBAAqB,6JAAO,OAAO,GAAA,EAAQ,OAAO,CAAC,MAAM,4JAC7D,MAAO,CAAA,CAAI,aAAa;gBACtB,MAAM,SAAS,QAAA,CAAS,QAAA,EAAA,CAAW,IAAA;gBACnC,IAAI,UAAU,OAAO,IAAA,KAAS,KAAK,IAAA,CACjC,CAAA,6JAAO,OAAO,MAAA,EACZ,iDACD;gBAEH,OAAO;oBACL,MAAM,QAAQ,QAAQ,KAAK,IAAA;oBAC3B,MAAM,KAAK,IAAA;oBACX,MAAM,KAAK,IAAA;oBACX,UAAU,QAAQ;oBAClB,cAAc,QAAQ,gBAAgB,KAAK,GAAA,EAAK;gBACjD;YACF,EAAC,CACH;QAED,OAAO;YACL;YACA;YACA,iBAAiB,QAAA,CAAS,SAAA;QAC3B;IACF,EAAC,CAAC,IAAA,uJAAK,OAAO,OAAA,EAAY,qBAAqB,CAAC;AAEnD,MAAM,qBAAqB,CAACC,6JAM1B,MAAO,CAAA,CAAI,aAAa;QACtB,MAAM,aAAa,CAAC,2KAAO,WAAW,EAAA,EAAY,IAAA,qKAChD,WAAW,MAAA,CACZ;QACD,MAAM,EAAE,UAAA,EAAY,SAAA,EAAW,SAAA,EAAW,IAAA,EAAM,GAAG;QACnD,MAAM,OAAO,qMAAO,kBAAkB,yKAAe,sBAAA,CAAoB;QACzE,6JAAO,OAAO,IAAA,EAAS,0BAA0B,CAAC,IAAA,sJAChD,OAAO,SAAA,EAAa,QAAQ,KAAK,CAClC;QAGD,6JAAO,OAAO,IAAA,EAAS,qBAAqB;QAC5C,MAAM,cAAc,OAAO,OAAO,4JAAA,EAAW;YAC3C,KAAK,IAAM,WAAW,WAAW,WAAA,CAAY,CAAC,KAAK,KAAA,CAAM;YACzD,OAAO,CAAC,QACN,+JAAI,mBAAA,CAAiB;oBACnB,MAAM;oBACN,SAAS;oBACT,OAAO;gBACR;QACJ,EAAC;QACF,6JAAO,OAAO,IAAA,EAAS,4BAA4B,CAAC,IAAA,uJAClD,OAAO,QAAA,EAAa,SAAS,YAAY,CAC1C;QAED,MAAM,EAAE,QAAA,EAAU,kBAAA,EAAoB,eAAA,EAAiB,GACrD,OAAO,mBAAmB;YACxB,MAAM;gBAAE,OAAO;gBAAa,OAAO,KAAK,KAAA;YAAO;YAC/C;QACD,EAAC;QAEJ,6JAAO,OAAO,IAAA,EAAS,uBAAuB,CAAC,IAAA,KAC7C,OAAO,0JAAA,EAAa,gBAAgB,WAAW,YAAA,CAAa,CAC7D;QACD,MAAM,eAAe,sKAAO,uBAAA,EAC1B,WAAW,YAAA,CACZ,CAAC,IAAA,KACA,OAAO,sJAAA,EACL,sBACA,CAAC,MACC,+JAAI,mBAAA,CAAiB;gBACnB,MAAM;gBACN,SAAS;gBACT,OAAO;YACR,GACJ,CACF;QACD,6JAAO,OAAO,IAAA,EAAS,mCAAmC,CAAC,IAAA,uJACzD,OAAO,QAAA,EAAa,eAAe,aAAa,CACjD;QAED,6JAAO,OAAO,IAAA,EACZ,gDACD,CAAC,IAAA,uJAAK,OAAO,QAAA,EAAa,SAAS,KAAK,KAAA,CAAM,CAAC;QAChD,OAAO,sBAAsB,KAAK,KAAA,EAAO,aAAa,CAAC,IAAA,uJACrD,OAAO,IAAA,EACL,CAAC,IACC,+JAAI,mBAAA,CAAiB;gBACnB,MAAM;gBACN,SAAA,CAAU,gBAAA,EAAkB,EAAE,IAAA,CAAK,CAAA;gBACnC,OAAO,YAAY,IAAI,EAAE,MAAA,GAAS,EAAE,OAAA;YACrC,GACJ,CACF;QACD,6JAAO,OAAO,IAAA,EAAS,mBAAmB;QAE1C,MAAM,qBAAqB,QAAO,OAAO,wJAAA,EACvC,oBACA,CAAC,6JACC,MAAO,CAAA,gKAAI,gBAAA,EAAc,OAAM,2KAAA,EAAW,aAAa,CAAC,EAAE,CAAC,OAAA,CAAU;oBACnE,MAAM,KAAK,IAAA;oBACX,MAAM,KAAK,IAAA;oBACX,MAAM,KAAK,IAAA,IAAQ;oBACnB,cAAc,KAAK,YAAA;oBACnB,UAAU,KAAK,QAAA;oBACf,oBACE,YAAA,CAAa,KAAA,EAAO,sBAAsB;oBAC5C,KAAK,YAAA,CAAa,KAAA,EAAO;gBAC1B,CAAA,EAAE,CACN,CAAC,IAAA,EACA,OAAO,0JAAA,EAAU;YAEf,iBAAiB,CAAC,0JAAM,MAAO,CAAA,CAAI,EAAE;YACrC,iBAAiB,CAAC,KAAM,OAAO,oJAAA,EAAI,EAAE;QACtC,EAAC,CACH;QAED,MAAM,eAAe,WAAW,YAAA;QAChC,MAAM,EAAE,MAAA,EAAQ,KAAA,EAAO,GAAG,OAAO;QACjC,MAAM,YAAY,OAAO,UAAU,gBAAgB;QACnD,MAAM,QAAQ,OAAO;QAErB,6JAAO,OAAO,IAAA,EAAS,4BAA4B,CAAC,IAAA,uJAClD,OAAO,QAAA,EAAa,sBAAsB,mBAAmB,wJAC7D,OAAO,QAAA,EAAa,aAAa,UAAU,CAC5C;QACD,MAAM,gBAAgB,6JAAO,OAAO,GAAA,EAClC,oBACA,CAAC,OACC,OAAO,qJAAA,EAAI,aAAa;gBACtB,MAAM,MAAM,sKAAO,cAAA,EACjB,MACA,OACA,aAAa,gBAAA,CACd;gBAED,MAAM,MAAM,sKAAO,oBAAA,EAAA,CAAmB,EAAE,UAAU,CAAA,EAAG,IAAI,CAAA,EAAG,QAAQ;oBAClE,cAAc,aAAa,eAAA;oBAC3B,MAAM;wBACJ,mBAAmB;wBACnB,kBAAkB,KAAK,IAAA;wBACvB,kBAAkB,KAAK,IAAA;wBACvB,kBAAkB,KAAK,IAAA;wBACvB,aAAa;wBACb,kBAAkB,KAAK,QAAA;wBACvB,4BAA4B,KAAK,kBAAA;wBACjC,YAAY,KAAK,GAAA;oBAClB;gBACF,EAAC;gBACF,OAAO;oBAAE;oBAAK;gBAAK;YACpB,EAAC,EACJ;YAAE,aAAa;QAAa,EAC7B;QAED,MAAM,YAAY,kMAAO,kBAAkB,EAAA;QAC3C,MAAM,aAAa,sMAAO,QAAkB,EAAM,QAAN,EAAgB;QAE5D,MAAM,iBAAiB,6JAAO,OAAO,EAAA,EAAO,cAAc,CAAC,IAAA,uJACzD,OAAO,OAAA,EAAY,WAAW,MAAA,GAAS,WAAW,QAAA,CAAS,EAC3D,OAAO,qJAAA,EAAI,CAAC,qLACV,OAAkB,EAAK,IAAI,CAAC,IAAV,AAAU,gLAC1B,iBAAkB,CAAA,CAAe,QAAQ,KAAK,CAC/C,CACF,CACF;QAED,MAAM,sBAAkB,kBAAkB,gKAAA,EAAK,kBAAkB,CAAC,IAAA,gLAChE,aAAkB,EAAW,GAAX,OAAqB,iLACvC,aAAkB,EAAW,GAAX;YAChB,6BAAyB,SAAS,mJAAA,EAAM,OAAO;YAC/C,yBAAA,+JAAA,CAAA,UAAA;YACA,4BAA4B;YAC5B,4BAA4B;QAC7B,EAAC,MACF,kBAAkB,oKAAA,EAAS;YACzB,UAAU,cAAc,GAAA,CAAI,CAAC,EAAE,GAAA,EAAK,GAAK,IAAI;YACnC;YACV;YACA,aAAa,eAAe,GAAA;YAC5B,cAAc;YACd,iBAAiB,aAAa,eAAA,IAAmB;QAClD,EAAC,wJACF,OAAO,GAAA,EAAQ,WAAW,OAAA,CAAQ,CACnC;QAED,MAAM,4KAAuB,MAAO,CAAA,CAAG,uBAAuB,CAAC,UAC7DC,GAAAA,EACAC,KAAAA,EACA;YACA,MAAM,+KAAS,SAAO,GAAA,MACpB,SAAO,kKAAA,EAAO;gBAAE,6KAAM,qBAAA;YAAkB,EAAC,CAC1C;YACD,MAAM,cAAc,6KAAO,SAAO,OAAA,EAAc,OAAO,CAAC,MAAM;YAC9D,MAAM,MAAM,YAAY,IAAA,CAAK,GAAA;YAE7B,6JAAO,OAAO,IAAA,EACZ,qDACD,CAAC,IAAA,uJAAK,OAAO,QAAA,EAAa;gBAAE,SAAS;gBAAK,OAAO,IAAI,OAAA;YAAS,EAAC,CAAC;YAEjE,MAAM,eAAe,sLAAO,OAAkB,EAC5C,SAD4C,UAE7C,CAAC,IAAA,gLACA,aAAkB,EAAW,GAAX,OAAqB,iLACvC,aAAkB,EAAW,GAAX;gBAChB,iLAAyB,QAAS,CAAA,CAAM,OAAO;gBAC/C,yBAAA,+JAAA,CAAA,UAAA;gBACA,4BAA4B;gBAC5B,4BAA4B;YAC7B,EAAC,iLACF,WAAkB,EAAS,KAAT;gBAChB,SAAS;gBACT,OAAA,CAAQ,oDAAA,EAAsD,IAAI,OAAA,CAAQ,CAAA;YAC3E,EAAC,wJACF,OAAO,GAAA,EAAQ,WAAW,OAAA,CAAQ,CACnC;YAED,OAAO,sBAAsB,yCAAyC,CACpE,aACD;QACF,EAAC;QAKF,MAAM,QAAQ,OAAO,OAAO,oJAAA,EAAG,OAAO;YACpC,QAAQ,IACN,gBAAgB,IAAA,uJACd,OAAO,GAAA,EAAQ;oBACb,WAAW,sBAAsB,uBAAuB;wBACtD,OAAO;oBACR,EAAC;oBACF,WAAW,mBAAmB,8BAA8B;gBAC7D,EAAC,8LACF,SAAmB,EACnB,QADmB,oLACE,0BAAA,EAAyB,CAAC,QAC7C,eAAe,IAAA,gLACb,aAAkB,EAAW,GAAX;wBAChB,oBAAoB,MAAM,IAAA;wBAC1B,2BAA2B,MAAM,SAAA;oBAClC,EAAC,iLACF,UAAkB,QAAA,gKAChB,OAAS,EAAA,AAAK,MAAM,OAAA,EAAS,mBAAmB,CACjD,EACD,WAAW,OAAA,GACX,OAAO,oJAAA,EACL,sBACE,0DACD,CACF,wJACD,OAAO,IAAA,EAAS,iBAAiB,CAAC,MAChC,qBAAqB,KAAK,MAAM,OAAA,CAAQ,CACzC,EACD,OAAO,8JAAA,EAAa,MAAM,oJAC1B,OAAO,EAAA,oJACP,OAAO,QAAA,oJACP,OAAO,EAAA,CACR,CACF,CACF;YACH,SAAS,IACP,gBAAgB,IAAA,CACd,OAAO,yJAAA,EAAQ;oBACb,WAAW,sBAAsB,sBAAsB;oBACvD,WAAW,mBAAmB,8BAA8B;gBAC7D,EAAC,wJACF,OAAO,GAAA,mLACL,iBAAmB,EAAA,sKAAe,yBAAA,CAAsB,CACzD,oJACD,OAAO,EAAA,CACR;QACJ,EAAC,CAAC,IAAA,mJAAK,OAAO,MAAA,CAAW;QAE1B,MAAM,aAAa,cAAc,GAAA,CAAI,CAAC,GAAG,IAAA,CAAO;gBAC9C,KAAK,EAAE,GAAA;gBACP,KAAK,EAAE,GAAA;gBACP,MAAM,kBAAA,CAAmB,EAAA,CAAI,IAAA;gBAC7B,UAAU,kBAAA,CAAmB,EAAA,CAAI,QAAA,IAAY;YAC9C,CAAA,EAAE;QAEH,6JAAO,OAAO,GAAA,EAAQ,mCAAmC,CAAC,IAAA,uJACxD,OAAO,QAAA,EAAa,iBAAiB,WAAW,CACjD;QAED,OAAO;YACL,MAAM;YACN;QACD;IACF,EAAC,CAAC,IAAA,uJAAK,OAAO,OAAA,EAAY,qBAAqB,CAAC;;;ACjtBnD,SAAS,sBAKPC,UAAiC,CAAE,CAAA,EASlC;IACD,MAAMC,OAAqB;QACzB,QAAQ,CAAE;QAEV,cAAc;YACZ,OAAO;gBACL,aAAa;YACd;QACF;QACD,cAAc;YACZ,iBAAiB;QAClB;QAED,aAAa;YACX,YAAY,IAAM,QAAQ,OAAA,CAAA,KAAA,EAAkB;YAC5C,QAAA,KAAA;YACA,SAAA,KAAA;QACD;QAED,YAAY,IAAA,CAAO,CAAE,CAAA;QACrB,eAAe,KAEd,CAFoB;QAGrB,kBAAkB,IAAA,KAAA;QAElB,gBAAgB,QAAQ,cAAA,IAAkB;QAG1C,GAAG,OAAA;IACJ;IAED,OAAO;QACL,OAAM,UAAA,EAAY;YAChB,OAAO,sBAAsB;gBAC3B,GAAG,IAAA;gBACH,aAAa;YACd,EAAC;QACH;QACD,YAAW,cAAA,EAAgB;YACzB,OAAO,sBAAsB;gBAC3B,GAAG,IAAA;gBACH,YAAY;YACb,EAAC;QACH;QACD,kBAAiB,kBAAA,EAAoB;YACnC,OAAO;gBACL,GAAG,IAAA;gBACH,kBAAkB;YACnB;QACF;QACD,eAAc,iBAAA,EAAmB;YAC/B,OAAO,sBAAsB;gBAC3B,GAAG,IAAA;gBACH,eAAe;YAChB,EAAC;QACH;IACF;AACF;;;;;;;;GAcD,SAAgB,cAGdC,IAAAA,EAA0C;IAC1C,OAAO,CACLC,OACAC,WASI;QACJ,OAAO,sBAAkE;YACvE,cAAc;YACd,cAAc,UAAU,CAAE;YAC1B,GAAG,IAAA;QACJ,EAAC;IACH;AACF","ignoreList":[0,1,2,3,4,5,6,7,8,9],"debugId":null}},
    {"offset": {"line": 926, "column": 0}, "map": {"version":3,"file":"index.js","sources":["file:///E:/Project%20That%20I%20Can%20Done%20nd%20Git%20Upl/summarized-app/node_modules/uploadthing/src/next.ts"],"sourcesContent":["import type { NextRequest } from \"next/server\";\nimport * as Effect from \"effect/Effect\";\n\nimport type { Json } from \"@uploadthing/shared\";\n\nimport { makeAdapterHandler } from \"./_internal/handler\";\nimport type { CreateBuilderOptions } from \"./_internal/upload-builder\";\nimport { createBuilder } from \"./_internal/upload-builder\";\nimport type { FileRouter, RouteHandlerOptions } from \"./types\";\n\nexport type { FileRouter };\nexport {\n  UTFiles,\n  /**\n   * This is an experimental feature.\n   * You need to be feature flagged on our backend to use this\n   */\n  UTRegion as experimental_UTRegion,\n} from \"./_internal/types\";\n\ntype AdapterArgs = {\n  req: NextRequest;\n};\n\nexport const createUploadthing = <TErrorShape extends Json>(\n  opts?: CreateBuilderOptions<TErrorShape>,\n) => createBuilder<AdapterArgs, TErrorShape>(opts);\n\nexport const createRouteHandler = <TRouter extends FileRouter>(\n  opts: RouteHandlerOptions<TRouter>,\n) => {\n  const handler = makeAdapterHandler<[NextRequest], AdapterArgs>(\n    (req) => Effect.succeed({ req }),\n    (req) => Effect.succeed(req),\n    opts,\n    \"nextjs-app\",\n  );\n  return { POST: handler, GET: handler };\n};\n"],"names":["opts?: CreateBuilderOptions<TErrorShape>","opts: RouteHandlerOptions<TRouter>"],"mappings":";;;;;;;;;;;;AAwBA,MAAa,oBAAoB,CAC/BA,kLACG,gBAAA,EAAwC,KAAK;AAElD,MAAa,qBAAqB,CAChCC,SACG;IACH,MAAM,qLAAU,qBAAA,EACd,CAAC,4JAAQ,OAAO,GAAA,EAAQ;YAAE;QAAK,EAAC,EAChC,CAAC,4JAAQ,OAAO,GAAA,EAAQ,IAAI,EAC5B,MACA,aACD;IACD,OAAO;QAAE,MAAM;QAAS,KAAK;IAAS;AACvC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 956, "column": 0}, "map": {"version":3,"file":"index.js","sources":["file:///E:/Project%20That%20I%20Can%20Done%20nd%20Git%20Upl/summarized-app/node_modules/uploadthing/src/sdk/ut-file.ts","file:///E:/Project%20That%20I%20Can%20Done%20nd%20Git%20Upl/summarized-app/node_modules/uploadthing/src/_internal/upload-server.ts","file:///E:/Project%20That%20I%20Can%20Done%20nd%20Git%20Upl/summarized-app/node_modules/uploadthing/src/sdk/utils.ts","file:///E:/Project%20That%20I%20Can%20Done%20nd%20Git%20Upl/summarized-app/node_modules/uploadthing/src/sdk/index.ts","file:///E:/Project%20That%20I%20Can%20Done%20nd%20Git%20Upl/summarized-app/node_modules/uploadthing/src/server.ts"],"sourcesContent":["import { lookup } from \"@uploadthing/mime-types\";\n\ninterface UTFilePropertyBag extends BlobPropertyBag {\n  lastModified?: number | undefined;\n  customId?: string | undefined;\n}\n\n/**\n * Extension of the Blob class that simplifies setting the `name` and `customId` properties,\n * similar to the built-in File class from Node > 20.\n */\nexport class UTFile extends Blob {\n  name: string;\n  lastModified: number;\n  customId: string | undefined;\n\n  constructor(parts: BlobPart[], name: string, options?: UTFilePropertyBag) {\n    const optionsWithDefaults = {\n      ...options,\n      type: options?.type ?? (lookup(name) || \"application/octet-stream\"),\n      lastModified: options?.lastModified ?? Date.now(),\n    };\n    super(parts, optionsWithDefaults);\n    this.name = name;\n    this.customId = optionsWithDefaults.customId;\n    this.lastModified = optionsWithDefaults.lastModified;\n  }\n}\n","import * as HttpClient from \"@effect/platform/HttpClient\";\nimport * as HttpClientRequest from \"@effect/platform/HttpClientRequest\";\nimport * as Effect from \"effect/Effect\";\nimport { unsafeCoerce } from \"effect/Function\";\n\nimport { UploadThingError } from \"@uploadthing/shared\";\n\nimport { version } from \"../../package.json\";\nimport type { FileEsque } from \"../sdk/types\";\nimport { logDeprecationWarning } from \"./deprecations\";\nimport { logHttpClientError } from \"./logger\";\nimport type { UploadPutResult } from \"./types\";\n\nexport const uploadWithoutProgress = (\n  file: FileEsque,\n  presigned: { key: string; url: string },\n) =>\n  Effect.gen(function* () {\n    const formData = new FormData();\n    formData.append(\"file\", file as Blob);\n\n    const httpClient = (yield* HttpClient.HttpClient).pipe(\n      HttpClient.filterStatusOk,\n    );\n    const json = yield* HttpClientRequest.put(presigned.url).pipe(\n      HttpClientRequest.bodyFormData(formData),\n      HttpClientRequest.setHeader(\"Range\", \"bytes=0-\"),\n      HttpClientRequest.setHeader(\"x-uploadthing-version\", version),\n      httpClient.execute,\n      Effect.tapError(logHttpClientError(\"Failed to upload file\")),\n      Effect.mapError(\n        (e) =>\n          new UploadThingError({\n            code: \"UPLOAD_FAILED\",\n            message: \"Failed to upload file\",\n            cause: e,\n          }),\n      ),\n      Effect.andThen((_) => _.json),\n      Effect.andThen(unsafeCoerce<unknown, UploadPutResult>),\n      Effect.scoped,\n    );\n\n    yield* Effect.logDebug(`File ${file.name} uploaded successfully`).pipe(\n      Effect.annotateLogs(\"json\", json),\n    );\n\n    return {\n      ...json,\n      get url() {\n        logDeprecationWarning(\n          \"`file.url` is deprecated and will be removed in uploadthing v9. Use `file.ufsUrl` instead.\",\n        );\n        return json.url;\n      },\n      get appUrl() {\n        logDeprecationWarning(\n          \"`file.appUrl` is deprecated and will be removed in uploadthing v9. Use `file.ufsUrl` instead.\",\n        );\n        return json.appUrl;\n      },\n    };\n  });\n","import * as HttpClient from \"@effect/platform/HttpClient\";\nimport * as HttpClientRequest from \"@effect/platform/HttpClientRequest\";\nimport * as Effect from \"effect/Effect\";\nimport * as Predicate from \"effect/Predicate\";\n\nimport {\n  generateKey,\n  generateSignedURL,\n  UploadThingError,\n} from \"@uploadthing/shared\";\nimport type {\n  ACL,\n  ContentDisposition,\n  Json,\n  MaybeUrl,\n  SerializedUploadThingError,\n} from \"@uploadthing/shared\";\n\nimport { IngestUrl, UTToken } from \"../_internal/config\";\nimport { uploadWithoutProgress } from \"../_internal/upload-server\";\nimport type { UploadedFileData } from \"../types\";\nimport type { FileEsque, UrlWithOverrides } from \"./types\";\nimport { UTFile } from \"./ut-file\";\n\nexport function guardServerOnly() {\n  if (typeof window !== \"undefined\") {\n    throw new UploadThingError({\n      code: \"INTERNAL_SERVER_ERROR\",\n      message: \"The `utapi` can only be used on the server.\",\n    });\n  }\n}\n\nexport const downloadFile = (\n  _url: MaybeUrl | UrlWithOverrides,\n): Effect.Effect<UTFile, SerializedUploadThingError, HttpClient.HttpClient> =>\n  Effect.gen(function* () {\n    let url = Predicate.isRecord(_url) ? _url.url : _url;\n    if (typeof url === \"string\") {\n      // since dataurls will result in name being too long, tell the user\n      // to use uploadFiles instead.\n      if (url.startsWith(\"data:\")) {\n        return yield* Effect.fail({\n          code: \"BAD_REQUEST\",\n          message:\n            \"Please use uploadFiles() for data URLs. uploadFilesFromUrl() is intended for use with remote URLs only.\",\n          data: undefined,\n        } satisfies SerializedUploadThingError);\n      }\n    }\n    url = new URL(url);\n\n    const {\n      name = url.pathname.split(\"/\").pop() ?? \"unknown-filename\",\n      customId = undefined,\n    } = Predicate.isRecord(_url) ? _url : {};\n    const httpClient = (yield* HttpClient.HttpClient).pipe(\n      HttpClient.filterStatusOk,\n    );\n\n    const arrayBuffer = yield* HttpClientRequest.get(url).pipe(\n      HttpClientRequest.modify({ headers: {} }),\n      httpClient.execute,\n      Effect.flatMap((_) => _.arrayBuffer),\n      Effect.mapError((cause) => {\n        return {\n          code: \"BAD_REQUEST\",\n          message: `Failed to download requested file: ${cause.message}`,\n          data: cause.toJSON() as Json,\n        } satisfies SerializedUploadThingError;\n      }),\n      Effect.scoped,\n    );\n\n    return new UTFile([arrayBuffer], name, {\n      customId,\n      lastModified: Date.now(),\n    });\n  }).pipe(Effect.withLogSpan(\"downloadFile\"));\n\nconst generatePresignedUrl = (\n  file: FileEsque,\n  cd: ContentDisposition,\n  acl: ACL | undefined,\n) =>\n  Effect.gen(function* () {\n    const { apiKey, appId } = yield* UTToken;\n    const baseUrl = yield* IngestUrl(undefined);\n\n    const key = yield* generateKey(file, appId);\n\n    const url = yield* generateSignedURL(`${baseUrl}/${key}`, apiKey, {\n      // ttlInSeconds: routeOptions.presignedURLTTL,\n      data: {\n        \"x-ut-identifier\": appId,\n        \"x-ut-file-name\": file.name,\n        \"x-ut-file-size\": file.size,\n        \"x-ut-file-type\": file.type,\n        \"x-ut-custom-id\": file.customId,\n        \"x-ut-content-disposition\": cd,\n        \"x-ut-acl\": acl,\n      },\n    });\n    return { url, key };\n  }).pipe(Effect.withLogSpan(\"generatePresignedUrl\"));\n\nexport const uploadFile = (\n  file: FileEsque,\n  opts: {\n    contentDisposition?: ContentDisposition | undefined;\n    acl?: ACL | undefined;\n  },\n): Effect.Effect<\n  UploadedFileData,\n  SerializedUploadThingError,\n  HttpClient.HttpClient\n> =>\n  Effect.gen(function* () {\n    const presigned = yield* generatePresignedUrl(\n      file,\n      opts.contentDisposition ?? \"inline\",\n      opts.acl,\n    ).pipe(\n      Effect.catchTag(\"UploadThingError\", (e) =>\n        Effect.fail(UploadThingError.toObject(e)),\n      ),\n      Effect.catchTag(\"ConfigError\", () =>\n        Effect.fail({\n          code: \"INVALID_SERVER_CONFIG\",\n          message: \"Failed to generate presigned URL\",\n        } satisfies SerializedUploadThingError),\n      ),\n    );\n    const response = yield* uploadWithoutProgress(file, presigned).pipe(\n      Effect.catchTag(\"UploadThingError\", (e) =>\n        Effect.fail(UploadThingError.toObject(e)),\n      ),\n      Effect.catchTag(\"ResponseError\", (e) =>\n        Effect.fail({\n          code: \"UPLOAD_FAILED\",\n          message: \"Failed to upload file\",\n          data: e.toJSON() as Json,\n        } satisfies SerializedUploadThingError),\n      ),\n    );\n\n    return {\n      key: presigned.key,\n      url: response.url,\n      appUrl: response.appUrl,\n      ufsUrl: response.ufsUrl,\n      lastModified: file.lastModified ?? Date.now(),\n      name: file.name,\n      size: file.size,\n      type: file.type,\n      customId: file.customId ?? null,\n      fileHash: response.fileHash,\n    };\n  }).pipe(Effect.withLogSpan(\"uploadFile\"));\n","import type * as FetchHttpClient from \"@effect/platform/FetchHttpClient\";\nimport * as HttpClient from \"@effect/platform/HttpClient\";\nimport type * as HttpClientError from \"@effect/platform/HttpClientError\";\nimport * as HttpClientRequest from \"@effect/platform/HttpClientRequest\";\nimport * as HttpClientResponse from \"@effect/platform/HttpClientResponse\";\nimport * as Arr from \"effect/Array\";\nimport * as Cause from \"effect/Cause\";\nimport * as Effect from \"effect/Effect\";\nimport type { ManagedRuntime } from \"effect/ManagedRuntime\";\nimport type { ParseError } from \"effect/ParseResult\";\nimport * as Redacted from \"effect/Redacted\";\nimport * as S from \"effect/Schema\";\n\nimport type { ACL, FetchEsque, MaybeUrl } from \"@uploadthing/shared\";\nimport {\n  generateSignedURL,\n  parseTimeToSeconds,\n  UploadThingError,\n} from \"@uploadthing/shared\";\n\nimport {\n  ApiUrl,\n  UfsAppIdLocation,\n  UfsHost,\n  UPLOADTHING_VERSION,\n  UTToken,\n} from \"../_internal/config\";\nimport { logHttpClientError, logHttpClientResponse } from \"../_internal/logger\";\nimport { makeRuntime } from \"../_internal/runtime\";\nimport type {\n  ACLUpdateOptions,\n  DeleteFilesOptions,\n  FileEsque,\n  GetFileUrlsOptions,\n  GetSignedURLOptions,\n  ListFilesOptions,\n  RenameFileUpdate,\n  UploadFileResult,\n  UploadFilesOptions,\n  UrlWithOverrides,\n  UTApiOptions,\n} from \"./types\";\nimport { UTFile } from \"./ut-file\";\nimport { downloadFile, guardServerOnly, uploadFile } from \"./utils\";\n\nexport { UTFile };\n\nexport class UTApi {\n  private fetch: FetchEsque;\n  private defaultKeyType: \"fileKey\" | \"customId\";\n  private runtime: ManagedRuntime<\n    HttpClient.HttpClient | FetchHttpClient.Fetch,\n    UploadThingError\n  >;\n  private opts: UTApiOptions;\n  constructor(options?: UTApiOptions) {\n    // Assert some stuff\n    guardServerOnly();\n    this.opts = options ?? {};\n    this.fetch = this.opts.fetch ?? globalThis.fetch;\n    this.defaultKeyType = this.opts.defaultKeyType ?? \"fileKey\";\n    this.runtime = makeRuntime(this.fetch, this.opts);\n  }\n\n  private requestUploadThing = <T>(\n    pathname: `/${string}`,\n    body: Record<string, unknown>,\n    responseSchema: S.Schema<T, any>,\n  ) =>\n    Effect.gen(this, function* () {\n      const { apiKey } = yield* UTToken;\n      const baseUrl = yield* ApiUrl;\n      const httpClient = (yield* HttpClient.HttpClient).pipe(\n        HttpClient.filterStatusOk,\n      );\n\n      return yield* HttpClientRequest.post(pathname).pipe(\n        HttpClientRequest.prependUrl(baseUrl),\n        HttpClientRequest.bodyUnsafeJson(body),\n        HttpClientRequest.setHeaders({\n          \"x-uploadthing-version\": UPLOADTHING_VERSION,\n          \"x-uploadthing-be-adapter\": \"server-sdk\",\n          \"x-uploadthing-api-key\": Redacted.value(apiKey),\n        }),\n        httpClient.execute,\n        Effect.tapBoth({\n          onSuccess: logHttpClientResponse(\"UploadThing API Response\"),\n          onFailure: logHttpClientError(\"Failed to request UploadThing API\"),\n        }),\n        Effect.flatMap(HttpClientResponse.schemaBodyJson(responseSchema)),\n        Effect.scoped,\n      );\n    }).pipe(\n      Effect.catchTag(\n        \"ConfigError\",\n        (e) =>\n          new UploadThingError({\n            code: \"INVALID_SERVER_CONFIG\",\n            message:\n              \"There was an error with the server configuration. More info can be found on this error's `cause` property\",\n            cause: e,\n          }),\n      ),\n      Effect.withLogSpan(\"utapi.#requestUploadThing\"),\n    );\n\n  private executeAsync = async <A>(\n    program: Effect.Effect<\n      A,\n      UploadThingError | ParseError | HttpClientError.HttpClientError,\n      HttpClient.HttpClient\n    >,\n    signal?: AbortSignal,\n  ) => {\n    const exit = await program.pipe(\n      Effect.withLogSpan(\"utapi.#executeAsync\"),\n      (e) => this.runtime.runPromiseExit(e, signal ? { signal } : undefined),\n    );\n\n    if (exit._tag === \"Failure\") {\n      throw Cause.squash(exit.cause);\n    }\n\n    return exit.value;\n  };\n\n  /**\n   * Upload files to UploadThing storage.\n   *\n   * @example\n   * await uploadFiles(new File([\"foo\"], \"foo.txt\"));\n   *\n   * @example\n   * await uploadFiles([\n   *   new File([\"foo\"], \"foo.txt\"),\n   *   new File([\"bar\"], \"bar.txt\"),\n   * ]);\n   */\n  uploadFiles(\n    files: FileEsque,\n    opts?: UploadFilesOptions,\n  ): Promise<UploadFileResult>;\n  uploadFiles(\n    files: FileEsque[],\n    opts?: UploadFilesOptions,\n  ): Promise<UploadFileResult[]>;\n  uploadFiles(\n    files: FileEsque | FileEsque[],\n    opts?: UploadFilesOptions,\n  ): Promise<UploadFileResult | UploadFileResult[]> {\n    guardServerOnly();\n\n    const concurrency = opts?.concurrency ?? 1;\n    if (concurrency < 1 || concurrency > 25) {\n      throw new UploadThingError({\n        code: \"BAD_REQUEST\",\n        message: \"concurrency must be a positive integer between 1 and 25\",\n      });\n    }\n\n    const program: Effect.Effect<\n      UploadFileResult | UploadFileResult[],\n      never,\n      HttpClient.HttpClient\n    > = Effect.forEach(\n      Arr.ensure(files),\n      (file) =>\n        uploadFile(file, opts ?? {}).pipe(\n          Effect.match({\n            onSuccess: (data) => ({ data, error: null }),\n            onFailure: (error) => ({ data: null, error }),\n          }),\n        ),\n      { concurrency },\n    ).pipe(\n      Effect.map((ups) => (Array.isArray(files) ? ups : ups[0]!)),\n      Effect.tap((res) =>\n        Effect.logDebug(\"Finished uploading\").pipe(\n          Effect.annotateLogs(\"uploadResult\", res),\n        ),\n      ),\n      Effect.withLogSpan(\"uploadFiles\"),\n    );\n\n    return this.executeAsync(program, opts?.signal);\n  }\n\n  /**\n   * @param {string} url The URL of the file to upload\n   * @param {Json} metadata JSON-parseable metadata to attach to the uploaded file(s)\n   *\n   * @example\n   * await uploadFileFromUrl(\"https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\");\n   *\n   * @example\n   * await uploadFileFromUrl([\n   *   \"https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\",\n   *   \"https://uploadthing.com/f/1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\"\n   * ])\n   */\n  uploadFilesFromUrl(\n    urls: MaybeUrl | UrlWithOverrides,\n    opts?: UploadFilesOptions,\n  ): Promise<UploadFileResult>;\n  uploadFilesFromUrl(\n    urls: (MaybeUrl | UrlWithOverrides)[],\n    opts?: UploadFilesOptions,\n  ): Promise<UploadFileResult[]>;\n  uploadFilesFromUrl(\n    urls: MaybeUrl | UrlWithOverrides | (MaybeUrl | UrlWithOverrides)[],\n    opts?: UploadFilesOptions,\n  ): Promise<UploadFileResult | UploadFileResult[]> {\n    guardServerOnly();\n\n    const concurrency = opts?.concurrency ?? 1;\n    if (concurrency < 1 || concurrency > 25) {\n      throw new UploadThingError({\n        code: \"BAD_REQUEST\",\n        message: \"concurrency must be a positive integer between 1 and 25\",\n      });\n    }\n\n    const program: Effect.Effect<\n      UploadFileResult | UploadFileResult[],\n      never,\n      HttpClient.HttpClient\n    > = Effect.forEach(\n      Arr.ensure(urls),\n      (url) =>\n        downloadFile(url).pipe(\n          Effect.flatMap((file) => uploadFile(file, opts ?? {})),\n          Effect.match({\n            onSuccess: (data) => ({ data, error: null }),\n            onFailure: (error) => ({ data: null, error }),\n          }),\n        ),\n      { concurrency },\n    )\n      .pipe(\n        Effect.map((ups) => (Array.isArray(urls) ? ups : ups[0]!)),\n        Effect.tap((res) =>\n          Effect.logDebug(\"Finished uploading\").pipe(\n            Effect.annotateLogs(\"uploadResult\", res),\n          ),\n        ),\n        Effect.withLogSpan(\"uploadFiles\"),\n      )\n      .pipe(Effect.withLogSpan(\"uploadFilesFromUrl\"));\n\n    return this.executeAsync(program, opts?.signal);\n  }\n\n  /**\n   * Request to delete files from UploadThing storage.\n   * @param {string | string[]} fileKeys\n   *\n   * @example\n   * await deleteFiles(\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\");\n   *\n   * @example\n   * await deleteFiles([\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\",\"1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\"])\n   *\n   * @example\n   * await deleteFiles(\"myCustomIdentifier\", { keyType: \"customId\" })\n   */\n  deleteFiles = async (keys: string[] | string, opts?: DeleteFilesOptions) => {\n    guardServerOnly();\n    const { keyType = this.defaultKeyType } = opts ?? {};\n\n    class DeleteFileResponse extends S.Class<DeleteFileResponse>(\n      \"DeleteFileResponse\",\n    )({\n      success: S.Boolean,\n      deletedCount: S.Number,\n    }) {}\n\n    return await this.executeAsync(\n      this.requestUploadThing(\n        \"/v6/deleteFiles\",\n        keyType === \"fileKey\"\n          ? { fileKeys: Arr.ensure(keys) }\n          : { customIds: Arr.ensure(keys) },\n        DeleteFileResponse,\n      ).pipe(Effect.withLogSpan(\"deleteFiles\")),\n    );\n  };\n\n  /**\n   * Request file URLs from UploadThing storage.\n   * @param {string | string[]} fileKeys\n   *\n   * @example\n   * const data = await getFileUrls(\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\");\n   * console.log(data); // [{key: \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\", url: \"https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\"}]\n   *\n   * @example\n   * const data = await getFileUrls([\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\",\"1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\"])\n   * console.log(data) // [{key: \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\", url: \"https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\" },{key: \"1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\", url: \"https://uploadthing.com/f/1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\"}]\n   *\n   * @deprecated - See https://docs.uploadthing.com/working-with-files#accessing-files for info how to access files\n   */\n  getFileUrls = async (keys: string[] | string, opts?: GetFileUrlsOptions) => {\n    guardServerOnly();\n\n    const { keyType = this.defaultKeyType } = opts ?? {};\n\n    class GetFileUrlResponse extends S.Class<GetFileUrlResponse>(\n      \"GetFileUrlResponse\",\n    )({\n      data: S.Array(\n        S.Struct({\n          key: S.String,\n          url: S.String,\n        }),\n      ),\n    }) {}\n\n    return await this.executeAsync(\n      this.requestUploadThing(\n        \"/v6/getFileUrl\",\n        keyType === \"fileKey\"\n          ? { fileKeys: Arr.ensure(keys) }\n          : { customIds: Arr.ensure(keys) },\n        GetFileUrlResponse,\n      ).pipe(Effect.withLogSpan(\"getFileUrls\")),\n    );\n  };\n\n  /**\n   * Request file list from UploadThing storage.\n   * @param {object} opts\n   * @param {number} opts.limit The maximum number of files to return\n   * @param {number} opts.offset The number of files to skip\n   *\n   * @example\n   * const data = await listFiles({ limit: 1 });\n   * console.log(data); // { key: \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\", id: \"2e0fdb64-9957-4262-8e45-f372ba903ac8\" }\n   */\n  listFiles = async (opts?: ListFilesOptions) => {\n    guardServerOnly();\n\n    class ListFileResponse extends S.Class<ListFileResponse>(\n      \"ListFileResponse\",\n    )({\n      hasMore: S.Boolean,\n      files: S.Array(\n        S.Struct({\n          id: S.String,\n          customId: S.NullOr(S.String),\n          key: S.String,\n          name: S.String,\n          size: S.Number,\n          status: S.Literal(\n            \"Deletion Pending\",\n            \"Failed\",\n            \"Uploaded\",\n            \"Uploading\",\n          ),\n          uploadedAt: S.Number,\n        }),\n      ),\n    }) {}\n\n    return await this.executeAsync(\n      this.requestUploadThing(\n        \"/v6/listFiles\",\n        { ...opts },\n        ListFileResponse,\n      ).pipe(Effect.withLogSpan(\"listFiles\")),\n    );\n  };\n\n  renameFiles = async (updates: RenameFileUpdate | RenameFileUpdate[]) => {\n    guardServerOnly();\n\n    class RenameFileResponse extends S.Class<RenameFileResponse>(\n      \"RenameFileResponse\",\n    )({\n      success: S.Boolean,\n    }) {}\n\n    return await this.executeAsync(\n      this.requestUploadThing(\n        \"/v6/renameFiles\",\n        { updates: Arr.ensure(updates) },\n        RenameFileResponse,\n      ).pipe(Effect.withLogSpan(\"renameFiles\")),\n    );\n  };\n\n  getUsageInfo = async () => {\n    guardServerOnly();\n\n    class GetUsageInfoResponse extends S.Class<GetUsageInfoResponse>(\n      \"GetUsageInfoResponse\",\n    )({\n      totalBytes: S.Number,\n      appTotalBytes: S.Number,\n      filesUploaded: S.Number,\n      limitBytes: S.Number,\n    }) {}\n\n    return await this.executeAsync(\n      this.requestUploadThing(\n        \"/v6/getUsageInfo\",\n        {},\n        GetUsageInfoResponse,\n      ).pipe(Effect.withLogSpan(\"getUsageInfo\")),\n    );\n  };\n\n  /**\n   * Generate a presigned url for a private file\n   * Unlike {@link getSignedURL}, this method does not make a fetch request to the UploadThing API\n   * and is the recommended way to generate a presigned url for a private file.\n   **/\n  generateSignedURL = async (key: string, opts?: GetSignedURLOptions) => {\n    guardServerOnly();\n\n    const expiresIn = parseTimeToSeconds(opts?.expiresIn ?? \"5 minutes\");\n\n    if (opts?.expiresIn && isNaN(expiresIn)) {\n      throw new UploadThingError({\n        code: \"BAD_REQUEST\",\n        message:\n          \"expiresIn must be a valid time string, for example '1d', '2 days', or a number of seconds.\",\n      });\n    }\n    if (expiresIn > 86400 * 7) {\n      throw new UploadThingError({\n        code: \"BAD_REQUEST\",\n        message: \"expiresIn must be less than 7 days (604800 seconds).\",\n      });\n    }\n\n    const program = Effect.gen(function* () {\n      const { apiKey, appId } = yield* UTToken;\n      const appIdLocation = yield* UfsAppIdLocation;\n      const ufsHost = yield* UfsHost;\n\n      const proto = ufsHost.includes(\"local\") ? \"http\" : \"https\";\n      // either subdomain or path style\n      const urlBase =\n        appIdLocation === \"subdomain\"\n          ? `${proto}://${appId}.${ufsHost}/f/${key}`\n          : `${proto}://${ufsHost}/a/${appId}/${key}`;\n\n      const ufsUrl = yield* generateSignedURL(urlBase, apiKey, {\n        ttlInSeconds: expiresIn,\n      });\n\n      return {\n        ufsUrl,\n      };\n    });\n\n    return await this.executeAsync(\n      program.pipe(\n        Effect.catchTag(\n          \"ConfigError\",\n          (e) =>\n            new UploadThingError({\n              code: \"INVALID_SERVER_CONFIG\",\n              message:\n                \"There was an error with the server configuration. More info can be found on this error's `cause` property\",\n              cause: e,\n            }),\n        ),\n        Effect.withLogSpan(\"generateSignedURL\"),\n      ),\n    );\n  };\n\n  /**\n   * Request a presigned url for a private file(s)\n   * @remarks This method is no longer recommended as it makes a fetch\n   * request to the UploadThing API which incurs redundant latency. It\n   * will be deprecated in UploadThing v8 and removed in UploadThing v9.\n   *\n   * @see {@link generateSignedURL} for a more efficient way to generate a presigned url\n   **/\n  getSignedURL = async (key: string, opts?: GetSignedURLOptions) => {\n    guardServerOnly();\n\n    const expiresIn = opts?.expiresIn\n      ? parseTimeToSeconds(opts.expiresIn)\n      : undefined;\n    const { keyType = this.defaultKeyType } = opts ?? {};\n\n    if (opts?.expiresIn && isNaN(expiresIn!)) {\n      throw new UploadThingError({\n        code: \"BAD_REQUEST\",\n        message:\n          \"expiresIn must be a valid time string, for example '1d', '2 days', or a number of seconds.\",\n      });\n    }\n    if (expiresIn && expiresIn > 86400 * 7) {\n      throw new UploadThingError({\n        code: \"BAD_REQUEST\",\n        message: \"expiresIn must be less than 7 days (604800 seconds).\",\n      });\n    }\n\n    class GetSignedUrlResponse extends S.Class<GetSignedUrlResponse>(\n      \"GetSignedUrlResponse\",\n    )({\n      url: S.String,\n      ufsUrl: S.String,\n    }) {}\n\n    return await this.executeAsync(\n      this.requestUploadThing(\n        \"/v6/requestFileAccess\",\n        keyType === \"fileKey\"\n          ? { fileKey: key, expiresIn }\n          : { customId: key, expiresIn },\n        GetSignedUrlResponse,\n      ).pipe(Effect.withLogSpan(\"getSignedURL\")),\n    );\n  };\n\n  /**\n   * Update the ACL of a file or set of files.\n   *\n   * @example\n   * // Make a single file public\n   * await utapi.updateACL(\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\", \"public-read\");\n   *\n   * // Make multiple files private\n   * await utapi.updateACL(\n   *   [\n   *     \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\",\n   *     \"1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\",\n   *   ],\n   *   \"private\",\n   * );\n   */\n  updateACL = async (\n    keys: string | string[],\n    acl: ACL,\n    opts?: ACLUpdateOptions,\n  ) => {\n    guardServerOnly();\n\n    const { keyType = this.defaultKeyType } = opts ?? {};\n    const updates = Arr.ensure(keys).map((key) => {\n      return keyType === \"fileKey\"\n        ? { fileKey: key, acl }\n        : { customId: key, acl };\n    });\n\n    const responseSchema = S.Struct({\n      success: S.Boolean,\n    });\n\n    return await this.executeAsync(\n      this.requestUploadThing(\n        \"/v6/updateACL\",\n        { updates },\n        responseSchema,\n      ).pipe(Effect.withLogSpan(\"updateACL\")),\n    );\n  };\n}\n","import * as Effect from \"effect/Effect\";\n\nimport type { Json } from \"@uploadthing/shared\";\nimport { UploadThingError } from \"@uploadthing/shared\";\n\nimport { makeAdapterHandler } from \"./_internal/handler\";\nimport { extractRouterConfig as extractEffect } from \"./_internal/route-config\";\nimport type { CreateBuilderOptions } from \"./_internal/upload-builder\";\nimport { createBuilder } from \"./_internal/upload-builder\";\nimport type { FileRouter, RouteHandlerOptions } from \"./types\";\n\nexport {\n  UTFiles,\n  /**\n   * This is an experimental feature.\n   * You need to be feature flagged on our backend to use this\n   */\n  UTRegion as experimental_UTRegion,\n} from \"./_internal/types\";\nexport { UTApi } from \"./sdk\";\nexport { UTFile } from \"./sdk/ut-file\";\nexport { UploadThingError, type FileRouter, makeAdapterHandler, createBuilder };\n\ntype AdapterArgs = {\n  req: Request;\n};\n\nexport const createUploadthing = <TErrorShape extends Json>(\n  opts?: CreateBuilderOptions<TErrorShape>,\n) => createBuilder<AdapterArgs, TErrorShape>(opts);\n\nexport const createRouteHandler = <TRouter extends FileRouter>(\n  opts: RouteHandlerOptions<TRouter>,\n) => {\n  return makeAdapterHandler<[Request | { request: Request }], AdapterArgs>(\n    (ev) =>\n      Effect.succeed({\n        req: \"request\" in ev ? ev.request : ev,\n      }),\n    (ev) => Effect.succeed(\"request\" in ev ? ev.request : ev),\n    opts,\n    \"server\",\n  );\n};\n\nexport const extractRouterConfig = (router: FileRouter) =>\n  Effect.runSync(extractEffect(router));\n"],"names":["parts: BlobPart[]","name: string","options?: UTFilePropertyBag","file: FileEsque","presigned: { key: string; url: string }","HttpClient","UploadThingError","Effect","UploadThingError","_url: MaybeUrl | UrlWithOverrides","HttpClient","Effect","file: FileEsque","cd: ContentDisposition","acl: ACL | undefined","opts: {\n    contentDisposition?: ContentDisposition | undefined;\n    acl?: ACL | undefined;\n  }","options?: UTApiOptions","pathname: `/${string}`","body: Record<string, unknown>","responseSchema: S.Schema<T, any>","UPLOADTHING_VERSION","Effect","UploadThingError","program: Effect.Effect<\n      A,\n      UploadThingError | ParseError | HttpClientError.HttpClientError,\n      HttpClient.HttpClient\n    >","signal?: AbortSignal","files: FileEsque | FileEsque[]","opts?: UploadFilesOptions","program: Effect.Effect<\n      UploadFileResult | UploadFileResult[],\n      never,\n      HttpClient.HttpClient\n    >","urls: MaybeUrl | UrlWithOverrides | (MaybeUrl | UrlWithOverrides)[]","keys: string[] | string","opts?: DeleteFilesOptions","opts?: GetFileUrlsOptions","opts?: ListFilesOptions","updates: RenameFileUpdate | RenameFileUpdate[]","key: string","opts?: GetSignedURLOptions","keys: string | string[]","acl: ACL","opts?: ACLUpdateOptions","opts?: CreateBuilderOptions<TErrorShape>","opts: RouteHandlerOptions<TRouter>","extractRouterConfig","router: FileRouter"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAWA,IAAa,SAAb,cAA4B,KAAK;IAC/B,KAAA;IACA,aAAA;IACA,SAAA;IAEA,YAAYA,KAAAA,EAAmBC,IAAAA,EAAcC,OAAAA,CAA6B;QACxE,MAAM,sBAAsB;YAC1B,GAAG,OAAA;YACH,MAAM,SAAS,QAAA,uKAAS,SAAA,EAAO,KAAK,IAAI,0BAAA;YACxC,cAAc,SAAS,gBAAgB,KAAK,GAAA,EAAK;QAClD;QACD,KAAA,CAAM,OAAO,oBAAoB;QACjC,IAAA,CAAK,IAAA,GAAO;QACZ,IAAA,CAAK,QAAA,GAAW,oBAAoB,QAAA;QACpC,IAAA,CAAK,YAAA,GAAe,oBAAoB,YAAA;IACzC;AACF;;;ACdD,MAAa,wBAAwB,CACnCC,MACAC,kKAEA,MAAO,EAAI,CAAJ,YAAiB;QACtB,MAAM,WAAW,IAAI;QACrB,SAAS,MAAA,CAAO,QAAQ,KAAa;QAErC,MAAM,aAAa,CAAC,2KAAOC,aAAW,EAAY,IAAA,qKAChDA,aAAW,IAAA,CACZ;QACD,MAAM,OAAO,sLAAO,MAAkB,EAAI,UAAU,EAAd,CAAc,CAAI,CAAC,IAAA,gLACvD,eAAkB,EAAa,GAAb,MAAsB,iLACxC,YAAkB,EAAU,MAAV,GAAmB,WAAW,iLAChD,YAAkB,EAAU,MAAV,mLAAmC,UAAA,CAAQ,EAC7D,WAAW,OAAA,wJACX,SAAO,EAAA,6KAAS,qBAAA,EAAmB,wBAAwB,CAAC,wJAC5D,SAAO,EAAA,EACL,CAAC,IACC,+JAAIC,mBAAAA,CAAiB;gBACnB,MAAM;gBACN,SAAS;gBACT,OAAO;YACR,GACJ,wJACD,SAAO,CAAA,EAAQ,CAAC,IAAM,EAAE,IAAA,CAAK,wJAC7B,SAAO,CAAA,sJAAQ,eAAA,CAAuC,oJACtDC,SAAO,CACR;QAED,QAAO,SAAO,uJAAA,EAAA,CAAU,KAAA,EAAO,KAAK,IAAA,CAAK,sBAAA,CAAA,CAAwB,CAAC,IAAA,uJAChE,SAAO,MAAA,EAAa,QAAQ,KAAK,CAClC;QAED,OAAO;YACL,GAAG,IAAA;YACH,IAAI,OAAM;gBACR,CAAA,GAAA,iKAAA,CAAA,wBAAA,EACE,6FACD;gBACD,OAAO,KAAK,GAAA;YACb;YACD,IAAI,UAAS;gBACX,CAAA,GAAA,iKAAA,CAAA,wBAAA,EACE,gGACD;gBACD,OAAO,KAAK,MAAA;YACb;QACF;IACF,EAAC;;;ACtCJ,SAAgB,kBAAkB;IAChC,WAAW,WAAW,YACpB,KAAA,MAAM,IAAIC,mBAAiB;;IAG1B;AAEJ;AAED,MAAa,eAAe,CAC1BC,6JAEA,MAAO,EAAI,CAAJ,YAAiB;QACtB,IAAI,+JAAM,UAAU,CAAA,EAAS,KAAK,GAAG,KAAK,GAAA,GAAM;QAChD,IAAA,OAAW,QAAQ,UAGjB;gBAAI,IAAI,UAAA,CAAW,QAAQ,CACzB,CAAA,OAAO,6JAAO,OAAO,EAAA,AAAK;gBACxB,MAAM;gBACN,SACE;gBACF,MAAA,KAAA;YACD,EAAsC;QACxC;QAEH,MAAM,IAAI,IAAI;QAEd,MAAM,EACJ,OAAO,IAAI,QAAA,CAAS,KAAA,CAAM,IAAI,CAAC,GAAA,EAAK,IAAI,kBAAA,EACxC,WAAA,KAAA,CAAA,EACD,GAAG,UAAU,0JAAA,EAAS,KAAK,GAAG,OAAO,CAAE;QACxC,MAAM,aAAa,CAAC,OAAOC,aAAW,oKAAA,EAAY,IAAA,qKAChDA,aAAW,IAAA,CACZ;QAED,MAAM,cAAc,sLAAO,MAAkB,EAAI,IAAI,CAAC,IAAA,CACpD,EAD2C,kBACzB,oKAAA,EAAO;YAAE,SAAS,CAAE;QAAE,EAAC,EACzC,WAAW,OAAA,wJACX,SAAO,CAAA,EAAQ,CAAC,IAAM,EAAE,WAAA,CAAY,wJACpC,SAAO,EAAA,EAAS,CAAC,UAAU;YACzB,OAAO;gBACL,MAAM;gBACN,SAAA,CAAU,mCAAA,EAAqC,MAAM,OAAA,CAAQ,CAAA;gBAC7D,MAAM,MAAM,MAAA,EAAQ;YACrB;QACF,EAAC,oJACFC,SAAO,CACR;QAED,OAAO,IAAI,OAAO;YAAC,WAAY;SAAA,EAAE,MAAM;YACrC;YACA,cAAc,KAAK,GAAA,EAAK;QACzB;IACF,EAAC,CAAC,IAAA,CAAK,SAAO,2JAAA,EAAY,eAAe,CAAC;AAE7C,MAAM,uBAAuB,CAC3BC,MACAC,IACAC,4JAEA,MAAO,EAAI,CAAJ,YAAiB;QACtB,MAAM,EAAE,MAAA,EAAQ,KAAA,EAAO,GAAG,OAAO,iLAAA;QACjC,MAAM,UAAU,kLAAO,YAAA,EAAA,KAAA,EAAoB;QAE3C,MAAM,MAAM,sKAAO,cAAA,EAAY,MAAM,MAAM;QAE3C,MAAM,MAAM,sKAAO,oBAAA,EAAA,CAAmB,EAAE,QAAQ,CAAA,EAAG,IAAI,CAAA,EAAG,QAAQ;YAEhE,MAAM;gBACJ,mBAAmB;gBACnB,kBAAkB,KAAK,IAAA;gBACvB,kBAAkB,KAAK,IAAA;gBACvB,kBAAkB,KAAK,IAAA;gBACvB,kBAAkB,KAAK,QAAA;gBACvB,4BAA4B;gBAC5B,YAAY;YACb;QACF,EAAC;QACF,OAAO;YAAE;YAAK;QAAK;IACpB,EAAC,CAAC,IAAA,KAAK,SAAO,uJAAA,EAAY,uBAAuB,CAAC;AAErD,MAAa,aAAa,CACxBF,MACAG,6JASA,MAAO,EAAI,CAAJ,YAAiB;QACtB,MAAM,YAAY,OAAO,qBACvB,MACA,KAAK,kBAAA,IAAsB,UAC3B,KAAK,GAAA,CACN,CAAC,IAAA,uJACA,SAAO,EAAA,EAAS,oBAAoB,CAAC,IACnC,SAAO,oJAAA,6JAAK,mBAAA,CAAiB,QAAA,CAAS,EAAE,CAAC,CAC1C,wJACD,SAAO,EAAA,EAAS,eAAe,0JAC7B,OAAO,EAAA,AAAK;gBACV,MAAM;gBACN,SAAS;YACV,EAAsC,CACxC,CACF;QACD,MAAM,WAAW,OAAO,sBAAsB,MAAM,UAAU,CAAC,IAAA,uJAC7D,SAAO,EAAA,EAAS,oBAAoB,CAAC,yJACnC,QAAO,CAAA,4JAAK,mBAAA,CAAiB,QAAA,CAAS,EAAE,CAAC,CAC1C,wJACD,SAAO,EAAA,EAAS,iBAAiB,CAAC,KAChC,SAAO,mJAAA,EAAK;gBACV,MAAM;gBACN,SAAS;gBACT,MAAM,EAAE,MAAA,EAAQ;YACjB,EAAsC,CACxC,CACF;QAED,OAAO;YACL,KAAK,UAAU,GAAA;YACf,KAAK,SAAS,GAAA;YACd,QAAQ,SAAS,MAAA;YACjB,QAAQ,SAAS,MAAA;YACjB,cAAc,KAAK,YAAA,IAAgB,KAAK,GAAA,EAAK;YAC7C,MAAM,KAAK,IAAA;YACX,MAAM,KAAK,IAAA;YACX,MAAM,KAAK,IAAA;YACX,UAAU,KAAK,QAAA,IAAY;YAC3B,UAAU,SAAS,QAAA;QACpB;IACF,EAAC,CAAC,IAAA,uJAAK,SAAO,KAAA,EAAY,aAAa,CAAC;;;AC/G3C,IAAa,QAAb,MAAmB;IACT,MAAA;IACA,eAAA;IACA,QAAA;IAIA,KAAA;IACR,YAAYC,OAAAA,CAAwB;QAElC,iBAAiB;QACjB,IAAA,CAAK,IAAA,GAAO,WAAW,CAAE;QACzB,IAAA,CAAK,KAAA,GAAQ,IAAA,CAAK,IAAA,CAAK,KAAA,IAAS,WAAW,KAAA;QAC3C,IAAA,CAAK,cAAA,GAAiB,IAAA,CAAK,IAAA,CAAK,cAAA,IAAkB;QAClD,IAAA,CAAK,OAAA,OAAU,qLAAA,EAAY,IAAA,CAAK,KAAA,EAAO,IAAA,CAAK,IAAA,CAAK;IAClD;IAEO,qBAAqB,CAC3BC,UACAC,MACAC,uKAEA,MAAO,EAAI,CAAJ,GAAI,EAAM,aAAa;YAC5B,MAAM,EAAE,MAAA,EAAQ,GAAG,8KAAO,UAAA;YAC1B,MAAM,UAAU,8KAAO,SAAA;YACvB,MAAM,aAAa,CAAC,2KAAO,WAAW,EAAA,EAAY,IAAA,qKAChD,WAAW,MAAA,CACZ;YAED,OAAO,OAAO,kBAAkB,oKAAA,EAAK,SAAS,CAAC,IAAA,gLAC7C,aAAkB,EAAW,GAAX,KAAmB,MACrC,kBAAkB,0KAAA,EAAe,KAAK,iLACtC,aAAkB,EAAW,GAAX;gBAChB,yLAAyBC,UAAAA;gBACzB,4BAA4B;gBAC5B,iLAAyB,QAAS,CAAA,CAAM,OAAO;YAChD,EAAC,EACF,WAAW,OAAA,wJACX,SAAO,CAAA,EAAQ;gBACb,eAAW,+LAAA,EAAsB,2BAA2B;gBAC5D,sLAAW,qBAAA,EAAmB,oCAAoC;YACnE,EAAC,uJACF,SAAO,EAAA,mLAAQ,iBAAmB,EAAe,AAAf,eAA8B,CAAC,oJACjEC,SAAO,CACR;QACF,EAAC,CAAC,IAAA,uJACD,SAAO,EAAA,EACL,eACA,CAAC,IACC,IAAIC,8KAAAA,CAAiB;gBACnB,MAAM;gBACN,SACE;gBACF,OAAO;YACR,GACJ,wJACD,SAAO,KAAA,EAAY,4BAA4B,CAChD,CAAA;IAEK,eAAe,OACrBC,SAKAC,WACG;QACH,MAAM,OAAO,MAAM,QAAQ,IAAA,uJACzB,SAAO,KAAA,EAAY,sBAAsB,EACzC,CAAC,IAAM,IAAA,CAAK,OAAA,CAAQ,cAAA,CAAe,GAAG,SAAS;gBAAE;YAAQ,IAAA,KAAA,EAAa,CACvE;QAED,IAAI,KAAK,IAAA,KAAS,UAChB,CAAA,2JAAM,MAAM,GAAA,EAAO,KAAK,KAAA,CAAM;QAGhC,OAAO,KAAK,KAAA;IACb,EAAA;IAsBD,YACEC,KAAAA,EACAC,IAAAA,EACgD;QAChD,iBAAiB;QAEjB,MAAM,cAAc,MAAM,eAAe;QACzC,IAAI,cAAc,KAAK,cAAc,GACnC,CAAA,MAAM,+JAAIJ,mBAAAA,CAAiB;YACzB,MAAM;YACN,SAAS;QACV;QAGH,MAAMK,gKAIF,SAAO,CAAA,uJACT,IAAI,KAAA,EAAO,MAAM,EACjB,CAAC,OACC,WAAW,MAAM,QAAQ,CAAE,EAAC,CAAC,IAAA,uJAC3B,QAAO,CAAA,CAAM;gBACX,WAAW,CAAC,OAAA,CAAU;wBAAE;wBAAM,OAAO;oBAAM,CAAA;gBAC3C,WAAW,CAAC,QAAA,CAAW;wBAAE,MAAM;wBAAM;oBAAO,CAAA;YAC7C,EAAC,CACH,EACH;YAAE;QAAa,EAChB,CAAC,IAAA,uJACA,MAAO,EAAI,CAAJ,AAAK,MAAS,MAAM,OAAA,CAAQ,MAAM,GAAG,MAAM,GAAA,CAAI,EAAA,CAAK,GAC3D,SAAO,kJAAA,EAAI,CAAC,4JACV,SAAO,EAAA,EAAS,qBAAqB,CAAC,IAAA,uJACpC,SAAO,MAAA,EAAa,gBAAgB,IAAI,CACzC,CACF,MACD,SAAO,uJAAA,EAAY,cAAc,CAClC;QAED,OAAO,IAAA,CAAK,YAAA,CAAa,SAAS,MAAM,OAAO;IAChD;IAuBD,mBACEC,IAAAA,EACAF,IAAAA,EACgD;QAChD,iBAAiB;QAEjB,MAAM,cAAc,MAAM,eAAe;QACzC,IAAI,cAAc,KAAK,cAAc,GACnC,CAAA,MAAM,IAAIJ,8KAAAA,CAAiB;YACzB,MAAM;YACN,SAAS;QACV;QAGH,MAAMK,gKAIF,SAAO,CAAA,uJACT,IAAI,KAAA,EAAO,KAAK,EAChB,CAAC,MACC,aAAa,IAAI,CAAC,IAAA,uJAChB,SAAO,CAAA,EAAQ,CAAC,OAAS,WAAW,MAAM,QAAQ,CAAE,EAAC,CAAC,wJACtD,QAAO,CAAA,CAAM;gBACX,WAAW,CAAC,OAAA,CAAU;wBAAE;wBAAM,OAAO;oBAAM,CAAA;gBAC3C,WAAW,CAAC,QAAA,CAAW;wBAAE,MAAM;wBAAM;oBAAO,CAAA;YAC7C,EAAC,CACH,EACH;YAAE;QAAa,EAChB,CACE,IAAA,uJACC,MAAO,EAAI,CAAJ,AAAK,MAAS,MAAM,OAAA,CAAQ,KAAK,GAAG,MAAM,GAAA,CAAI,EAAA,CAAK,wJAC1D,MAAO,EAAI,CAAJ,AAAK,MACV,SAAO,wJAAA,EAAS,qBAAqB,CAAC,IAAA,uJACpC,SAAO,MAAA,EAAa,gBAAgB,IAAI,CACzC,CACF,wJACD,SAAO,KAAA,EAAY,cAAc,CAClC,CACA,IAAA,uJAAK,SAAO,KAAA,EAAY,qBAAqB,CAAC;QAEjD,OAAO,IAAA,CAAK,YAAA,CAAa,SAAS,MAAM,OAAO;IAChD;;;;;;;;;;;;;IAeD,cAAc,OAAOE,MAAyBC,SAA8B;QAC1E,iBAAiB;QACjB,MAAM,EAAE,UAAU,IAAA,CAAK,cAAA,EAAgB,GAAG,QAAQ,CAAE;QAEpD,MAAM,iMAA2B,EAAE,MAAA,EACjC,qBACD,CAAC;YACA,0KAAS,EAAE,SAAA;YACX,gLAAc,EAAE,OAAA;QACjB,EAAC,CAAC;QAAE;QAEL,OAAO,MAAM,IAAA,CAAK,YAAA,CAChB,IAAA,CAAK,kBAAA,CACH,mBACA,YAAY,YACR;YAAE,+JAAU,IAAI,KAAA,EAAO,KAAK;QAAE,IAC9B;YAAE,WAAW,IAAI,0JAAA,EAAO,KAAK;QAAE,GACnC,mBACD,CAAC,IAAA,uJAAK,SAAO,KAAA,EAAY,cAAc,CAAC,CAC1C;IACF,EAAA;;;;;;;;;;;;;;IAgBD,cAAc,OAAOD,MAAyBE,SAA8B;QAC1E,iBAAiB;QAEjB,MAAM,EAAE,UAAU,IAAA,CAAK,cAAA,EAAgB,GAAG,QAAQ,CAAE;QAEpD,MAAM,iMAA2B,EAAE,MAAA,EACjC,qBACD,CAAC;YACA,4KAAM,EAAE,MAAA,wKACN,EAAE,OAAA,EAAO;gBACP,KAAK,EAAE,yKAAA;gBACP,uKAAK,EAAE,OAAA;YACR,EAAC,CACH;QACF,EAAC,CAAC;QAAE;QAEL,OAAO,MAAM,IAAA,CAAK,YAAA,CAChB,IAAA,CAAK,kBAAA,CACH,kBACA,YAAY,YACR;YAAE,+JAAU,IAAI,KAAA,EAAO,KAAK;QAAE,IAC9B;YAAE,gKAAW,IAAI,KAAA,EAAO,KAAK;QAAE,GACnC,mBACD,CAAC,IAAA,uJAAK,SAAO,KAAA,EAAY,cAAc,CAAC,CAC1C;IACF,EAAA;;;;;;;;;;IAYD,YAAY,OAAOC,SAA4B;QAC7C,iBAAiB;QAEjB,MAAM,+LAAyB,EAAE,MAAA,EAC/B,mBACD,CAAC;YACA,2KAAS,EAAE,QAAA;YACX,6KAAO,EAAE,MAAA,wKACP,EAAE,OAAA,EAAO;gBACP,IAAI,EAAE,yKAAA;gBACN,gLAAU,EAAE,OAAA,oKAAO,EAAE,OAAA,CAAO;gBAC5B,uKAAK,EAAE,OAAA;gBACP,wKAAM,EAAE,OAAA;gBACR,wKAAM,EAAE,OAAA;gBACR,8KAAQ,EAAE,QAAA,EACR,oBACA,UACA,YACA,YACD;gBACD,6KAAY,EAAE,QAAA;YACf,EAAC,CACH;QACF,EAAC,CAAC;QAAE;QAEL,OAAO,MAAM,IAAA,CAAK,YAAA,CAChB,IAAA,CAAK,kBAAA,CACH,iBACA;YAAE,GAAG,IAAA;QAAM,GACX,iBACD,CAAC,IAAA,uJAAK,SAAO,KAAA,EAAY,YAAY,CAAC,CACxC;IACF,EAAA;IAED,cAAc,OAAOC,YAAmD;QACtE,iBAAiB;QAEjB,MAAM,iMAA2B,EAAE,MAAA,EACjC,qBACD,CAAC;YACA,2KAAS,EAAE,QAAA;QACZ,EAAC,CAAC;QAAE;QAEL,OAAO,MAAM,IAAA,CAAK,YAAA,CAChB,IAAA,CAAK,kBAAA,CACH,mBACA;YAAE,8JAAS,IAAI,KAAA,EAAO,QAAQ;QAAE,GAChC,mBACD,CAAC,IAAA,uJAAK,SAAO,KAAA,EAAY,cAAc,CAAC,CAC1C;IACF,EAAA;IAED,eAAe,YAAY;QACzB,iBAAiB;QAEjB,MAAM,mMAA6B,EAAE,MAAA,EACnC,uBACD,CAAC;YACA,8KAAY,EAAE,OAAA;YACd,iLAAe,EAAE,OAAA;YACjB,iLAAe,EAAE,OAAA;YACjB,8KAAY,EAAE,OAAA;QACf,EAAC,CAAC;QAAE;QAEL,OAAO,MAAM,IAAA,CAAK,YAAA,CAChB,IAAA,CAAK,kBAAA,CACH,oBACA,CAAE,GACF,qBACD,CAAC,IAAA,uJAAK,SAAO,KAAA,EAAY,eAAe,CAAC,CAC3C;IACF,EAAA;;;;;KAOD,oBAAoB,OAAOC,KAAaC,SAA+B;QACrE,iBAAiB;QAEjB,MAAM,2KAAY,qBAAA,EAAmB,MAAM,aAAa,YAAY;QAEpE,IAAI,MAAM,aAAa,MAAM,UAAU,CACrC,CAAA,MAAM,IAAIb,8KAAAA,CAAiB;YACzB,MAAM;YACN,SACE;QACH;QAEH,IAAI,YAAY,QAAQ,EACtB,CAAA,MAAM,+JAAIA,mBAAAA,CAAiB;YACzB,MAAM;YACN,SAAS;QACV;QAGH,MAAM,UAAU,SAAO,mJAAA,EAAI,aAAa;YACtC,MAAM,EAAE,MAAA,EAAQ,KAAA,EAAO,GAAG,8KAAO,UAAA;YACjC,MAAM,gBAAgB,8KAAO,mBAAA;YAC7B,MAAM,UAAU,8KAAO,UAAA;YAEvB,MAAM,QAAQ,QAAQ,QAAA,CAAS,QAAQ,GAAG,SAAS;YAEnD,MAAM,UACJ,kBAAkB,cAAA,CACb,EAAE,MAAM,GAAA,EAAK,MAAM,CAAA,EAAG,QAAQ,GAAA,EAAK,IAAI,CAAA,GAAA,CACvC,EAAE,MAAM,GAAA,EAAK,QAAQ,GAAA,EAAK,MAAM,CAAA,EAAG,IAAI,CAAA;YAE9C,MAAM,SAAS,OAAO,mLAAA,EAAkB,SAAS,QAAQ;gBACvD,cAAc;YACf,EAAC;YAEF,OAAO;gBACL;YACD;QACF,EAAC;QAEF,OAAO,MAAM,IAAA,CAAK,YAAA,CAChB,QAAQ,IAAA,CACN,SAAO,wJAAA,EACL,eACA,CAAC,IACC,+JAAIA,mBAAAA,CAAiB;gBACnB,MAAM;gBACN,SACE;gBACF,OAAO;YACR,GACJ,wJACD,SAAO,KAAA,EAAY,oBAAoB,CACxC,CACF;IACF,EAAA;;;;;;;;KAUD,eAAe,OAAOY,KAAaC,SAA+B;QAChE,iBAAiB;QAEjB,MAAM,YAAY,MAAM,2KACpB,qBAAA,EAAmB,KAAK,SAAA,CAAU,GAAA,KAAA;QAEtC,MAAM,EAAE,UAAU,IAAA,CAAK,cAAA,EAAgB,GAAG,QAAQ,CAAE;QAEpD,IAAI,MAAM,aAAa,MAAM,UAAW,CACtC,CAAA,MAAM,+JAAIb,mBAAAA,CAAiB;YACzB,MAAM;YACN,SACE;QACH;QAEH,IAAI,aAAa,YAAY,QAAQ,EACnC,CAAA,MAAM,+JAAIA,mBAAAA,CAAiB;YACzB,MAAM;YACN,SAAS;QACV;QAGH,MAAM,mMAA6B,EAAE,MAAA,EACnC,uBACD,CAAC;YACA,KAAK,EAAE,yKAAA;YACP,0KAAQ,EAAE,OAAA;QACX,EAAC,CAAC;QAAE;QAEL,OAAO,MAAM,IAAA,CAAK,YAAA,CAChB,IAAA,CAAK,kBAAA,CACH,yBACA,YAAY,YACR;YAAE,SAAS;YAAK;QAAW,IAC3B;YAAE,UAAU;YAAK;QAAW,GAChC,qBACD,CAAC,IAAA,uJAAK,SAAO,KAAA,EAAY,eAAe,CAAC,CAC3C;IACF,EAAA;;;;;;;;;;;;;;;;IAkBD,YAAY,OACVc,MACAC,KACAC,SACG;QACH,iBAAiB;QAEjB,MAAM,EAAE,UAAU,IAAA,CAAK,cAAA,EAAgB,GAAG,QAAQ,CAAE;QACpD,MAAM,+JAAU,IAAI,KAAA,EAAO,KAAK,CAAC,GAAA,CAAI,CAAC,QAAQ;YAC5C,OAAO,YAAY,YACf;gBAAE,SAAS;gBAAK;YAAK,IACrB;gBAAE,UAAU;gBAAK;YAAK;QAC3B,EAAC;QAEF,MAAM,uLAAiB,EAAE,OAAA,EAAO;YAC9B,2KAAS,EAAE,QAAA;QACZ,EAAC;QAEF,OAAO,MAAM,IAAA,CAAK,YAAA,CAChB,IAAA,CAAK,kBAAA,CACH,iBACA;YAAE;QAAS,GACX,eACD,CAAC,IAAA,uJAAK,SAAO,KAAA,EAAY,YAAY,CAAC,CACxC;IACF,EAAA;AACF;;;ACxhBD,MAAa,oBAAoB,CAC/BC,kLACG,gBAAA,EAAwC,KAAK;AAElD,MAAa,qBAAqB,CAChCC,SACG;IACH,OAAO,gMAAA,EACL,CAAC,2JACC,OAAO,GAAA,EAAQ;YACb,KAAK,aAAa,KAAK,GAAG,OAAA,GAAU;QACrC,EAAC,EACJ,CAAC,2JAAO,OAAO,GAAA,EAAQ,aAAa,KAAK,GAAG,OAAA,GAAU,GAAG,EACzD,MACA,SACD;AACF;AAED,MAAaC,wBAAsB,CAACC,+JAClC,OAAO,GAAA,6KAAQ,sBAAA,EAAc,OAAO,CAAC","ignoreList":[0,1,2,3,4],"debugId":null}}]
}